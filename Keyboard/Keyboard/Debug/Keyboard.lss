
KeyBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000824  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000824  000008b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800068  00800068  000008c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d94  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093e  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000932  00000000  00000000  0000209e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  000029d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059d  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab1  00000000  00000000  000030bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003b6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	84 c0       	rjmp	.+264    	; 0x10a <__ctors_end>
   2:	06 c1       	rjmp	.+524    	; 0x210 <__vector_1>
   4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
   6:	a6 c0       	rjmp	.+332    	; 0x154 <__bad_interrupt>
   8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
   a:	a4 c0       	rjmp	.+328    	; 0x154 <__bad_interrupt>
   c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
   e:	a2 c0       	rjmp	.+324    	; 0x154 <__bad_interrupt>
  10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
  12:	a0 c0       	rjmp	.+320    	; 0x154 <__bad_interrupt>
  14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
  16:	9e c0       	rjmp	.+316    	; 0x154 <__bad_interrupt>
  18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
  1a:	9c c0       	rjmp	.+312    	; 0x154 <__bad_interrupt>
  1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
  1e:	9a c0       	rjmp	.+308    	; 0x154 <__bad_interrupt>
  20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
  22:	98 c0       	rjmp	.+304    	; 0x154 <__bad_interrupt>
  24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
  26:	98 c3       	rjmp	.+1840   	; 0x758 <_ZN3PS27gerCharEv+0x2ee>
  28:	a4 c2       	rjmp	.+1352   	; 0x572 <_ZN3PS27gerCharEv+0x108>
  2a:	76 c3       	rjmp	.+1772   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  2c:	75 c3       	rjmp	.+1770   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  2e:	74 c3       	rjmp	.+1768   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  30:	73 c3       	rjmp	.+1766   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  32:	72 c3       	rjmp	.+1764   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  34:	71 c3       	rjmp	.+1762   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  36:	43 c2       	rjmp	.+1158   	; 0x4be <_ZN3PS27gerCharEv+0x54>
  38:	56 c2       	rjmp	.+1196   	; 0x4e6 <_ZN3PS27gerCharEv+0x7c>
  3a:	6e c3       	rjmp	.+1756   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  3c:	6d c3       	rjmp	.+1754   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  3e:	6c c3       	rjmp	.+1752   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  40:	50 c2       	rjmp	.+1184   	; 0x4e2 <_ZN3PS27gerCharEv+0x78>
  42:	41 c2       	rjmp	.+1154   	; 0x4c6 <_ZN3PS27gerCharEv+0x5c>
  44:	74 c3       	rjmp	.+1768   	; 0x72e <_ZN3PS27gerCharEv+0x2c4>
  46:	47 c2       	rjmp	.+1166   	; 0x4d6 <_ZN3PS27gerCharEv+0x6c>
  48:	55 c2       	rjmp	.+1194   	; 0x4f4 <_ZN3PS27gerCharEv+0x8a>
  4a:	66 c3       	rjmp	.+1740   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  4c:	65 c3       	rjmp	.+1738   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  4e:	1d c2       	rjmp	.+1082   	; 0x48a <_ZN3PS27gerCharEv+0x20>
  50:	44 c2       	rjmp	.+1160   	; 0x4da <_ZN3PS27gerCharEv+0x70>
  52:	d8 c3       	rjmp	.+1968   	; 0x804 <_ZN3PS27gerCharEv+0x39a>
  54:	1c c2       	rjmp	.+1080   	; 0x48e <_ZN3PS27gerCharEv+0x24>
  56:	5c c2       	rjmp	.+1208   	; 0x510 <_ZN3PS27gerCharEv+0xa6>
  58:	54 c2       	rjmp	.+1192   	; 0x502 <_ZN3PS27gerCharEv+0x98>
  5a:	5e c3       	rjmp	.+1724   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  5c:	5d c3       	rjmp	.+1722   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  5e:	7a c3       	rjmp	.+1780   	; 0x754 <_ZN3PS27gerCharEv+0x2ea>
  60:	38 c2       	rjmp	.+1136   	; 0x4d2 <_ZN3PS27gerCharEv+0x68>
  62:	17 c2       	rjmp	.+1070   	; 0x492 <_ZN3PS27gerCharEv+0x28>
  64:	32 c2       	rjmp	.+1124   	; 0x4ca <_ZN3PS27gerCharEv+0x60>
  66:	2d c2       	rjmp	.+1114   	; 0x4c2 <_ZN3PS27gerCharEv+0x58>
  68:	5a c2       	rjmp	.+1204   	; 0x51e <_ZN3PS27gerCharEv+0xb4>
  6a:	56 c3       	rjmp	.+1708   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  6c:	55 c3       	rjmp	.+1706   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  6e:	21 c2       	rjmp	.+1090   	; 0x4b2 <_ZN3PS27gerCharEv+0x48>
  70:	c7 c3       	rjmp	.+1934   	; 0x800 <_ZN3PS27gerCharEv+0x396>
  72:	13 c2       	rjmp	.+1062   	; 0x49a <_ZN3PS27gerCharEv+0x30>
  74:	10 c2       	rjmp	.+1056   	; 0x496 <_ZN3PS27gerCharEv+0x2c>
  76:	33 c2       	rjmp	.+1126   	; 0x4de <_ZN3PS27gerCharEv+0x74>
  78:	59 c2       	rjmp	.+1202   	; 0x52c <_ZN3PS27gerCharEv+0xc2>
  7a:	4e c3       	rjmp	.+1692   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  7c:	4d c3       	rjmp	.+1690   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  7e:	4c c3       	rjmp	.+1688   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  80:	16 c2       	rjmp	.+1068   	; 0x4ae <_ZN3PS27gerCharEv+0x44>
  82:	0f c2       	rjmp	.+1054   	; 0x4a2 <_ZN3PS27gerCharEv+0x38>
  84:	24 c2       	rjmp	.+1096   	; 0x4ce <_ZN3PS27gerCharEv+0x64>
  86:	59 c2       	rjmp	.+1202   	; 0x53a <_ZN3PS27gerCharEv+0xd0>
  88:	5f c2       	rjmp	.+1214   	; 0x548 <_ZN3PS27gerCharEv+0xde>
  8a:	46 c3       	rjmp	.+1676   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  8c:	45 c3       	rjmp	.+1674   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  8e:	a9 c2       	rjmp	.+1362   	; 0x5e2 <_ZN3PS27gerCharEv+0x178>
  90:	0a c2       	rjmp	.+1044   	; 0x4a6 <_ZN3PS27gerCharEv+0x3c>
  92:	05 c2       	rjmp	.+1034   	; 0x49e <_ZN3PS27gerCharEv+0x34>
  94:	10 c2       	rjmp	.+1056   	; 0x4b6 <_ZN3PS27gerCharEv+0x4c>
  96:	66 c2       	rjmp	.+1228   	; 0x564 <_ZN3PS27gerCharEv+0xfa>
  98:	5e c2       	rjmp	.+1212   	; 0x556 <_ZN3PS27gerCharEv+0xec>
  9a:	3e c3       	rjmp	.+1660   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  9c:	3d c3       	rjmp	.+1658   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  9e:	a8 c2       	rjmp	.+1360   	; 0x5f0 <_ZN3PS27gerCharEv+0x186>
  a0:	ae c2       	rjmp	.+1372   	; 0x5fe <_ZN3PS27gerCharEv+0x194>
  a2:	03 c2       	rjmp	.+1030   	; 0x4aa <_ZN3PS27gerCharEv+0x40>
  a4:	90 c2       	rjmp	.+1312   	; 0x5c6 <_ZN3PS27gerCharEv+0x15c>
  a6:	09 c2       	rjmp	.+1042   	; 0x4ba <_ZN3PS27gerCharEv+0x50>
  a8:	6b c2       	rjmp	.+1238   	; 0x580 <_ZN3PS27gerCharEv+0x116>
  aa:	36 c3       	rjmp	.+1644   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  ac:	35 c3       	rjmp	.+1642   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  ae:	34 c3       	rjmp	.+1640   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  b0:	91 c2       	rjmp	.+1314   	; 0x5d4 <_ZN3PS27gerCharEv+0x16a>
  b2:	32 c3       	rjmp	.+1636   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  b4:	7a c2       	rjmp	.+1268   	; 0x5aa <_ZN3PS27gerCharEv+0x140>
  b6:	6b c2       	rjmp	.+1238   	; 0x58e <_ZN3PS27gerCharEv+0x124>
  b8:	2f c3       	rjmp	.+1630   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  ba:	2e c3       	rjmp	.+1628   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  bc:	19 c3       	rjmp	.+1586   	; 0x6f0 <_ZN3PS27gerCharEv+0x286>
  be:	2c c3       	rjmp	.+1624   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  c0:	e2 c1       	rjmp	.+964    	; 0x486 <_ZN3PS27gerCharEv+0x1c>
  c2:	7a c2       	rjmp	.+1268   	; 0x5b8 <_ZN3PS27gerCharEv+0x14e>
  c4:	29 c3       	rjmp	.+1618   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  c6:	6a c2       	rjmp	.+1236   	; 0x59c <_ZN3PS27gerCharEv+0x132>
  c8:	27 c3       	rjmp	.+1614   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  ca:	26 c3       	rjmp	.+1612   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  cc:	25 c3       	rjmp	.+1610   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  ce:	24 c3       	rjmp	.+1608   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  d0:	23 c3       	rjmp	.+1606   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  d2:	22 c3       	rjmp	.+1604   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  d4:	21 c3       	rjmp	.+1602   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  d6:	20 c3       	rjmp	.+1600   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  d8:	99 c2       	rjmp	.+1330   	; 0x60c <_ZN3PS27gerCharEv+0x1a2>
  da:	1e c3       	rjmp	.+1596   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  dc:	1d c3       	rjmp	.+1594   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  de:	b2 c2       	rjmp	.+1380   	; 0x644 <_ZN3PS27gerCharEv+0x1da>
  e0:	1b c3       	rjmp	.+1590   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  e2:	ce c2       	rjmp	.+1436   	; 0x680 <_ZN3PS27gerCharEv+0x216>
  e4:	e7 c2       	rjmp	.+1486   	; 0x6b4 <_ZN3PS27gerCharEv+0x24a>
  e6:	18 c3       	rjmp	.+1584   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  e8:	17 c3       	rjmp	.+1582   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  ea:	16 c3       	rjmp	.+1580   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  ec:	a1 c2       	rjmp	.+1346   	; 0x630 <_ZN3PS27gerCharEv+0x1c6>
  ee:	96 c2       	rjmp	.+1324   	; 0x61c <_ZN3PS27gerCharEv+0x1b2>
  f0:	b3 c2       	rjmp	.+1382   	; 0x658 <_ZN3PS27gerCharEv+0x1ee>
  f2:	d0 c2       	rjmp	.+1440   	; 0x694 <_ZN3PS27gerCharEv+0x22a>
  f4:	d5 c2       	rjmp	.+1450   	; 0x6a0 <_ZN3PS27gerCharEv+0x236>
  f6:	e8 c2       	rjmp	.+1488   	; 0x6c8 <_ZN3PS27gerCharEv+0x25e>
  f8:	0f c3       	rjmp	.+1566   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  fa:	04 c3       	rjmp	.+1544   	; 0x704 <_ZN3PS27gerCharEv+0x29a>
  fc:	0d c3       	rjmp	.+1562   	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
  fe:	8c c2       	rjmp	.+1304   	; 0x618 <_ZN3PS27gerCharEv+0x1ae>
 100:	b5 c2       	rjmp	.+1386   	; 0x66c <_ZN3PS27gerCharEv+0x202>
 102:	88 c2       	rjmp	.+1296   	; 0x614 <_ZN3PS27gerCharEv+0x1aa>
 104:	85 c2       	rjmp	.+1290   	; 0x610 <_ZN3PS27gerCharEv+0x1a6>
 106:	ea c2       	rjmp	.+1492   	; 0x6dc <_ZN3PS27gerCharEv+0x272>

00000108 <__ctors_start>:
 108:	d8 00       	.word	0x00d8	; ????

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf e5       	ldi	r28, 0x5F	; 95
 110:	d4 e0       	ldi	r29, 0x04	; 4
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	a0 e6       	ldi	r26, 0x60	; 96
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e4 e2       	ldi	r30, 0x24	; 36
 11e:	f8 e0       	ldi	r31, 0x08	; 8
 120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
 122:	05 90       	lpm	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	a8 36       	cpi	r26, 0x68	; 104
 128:	b1 07       	cpc	r27, r17
 12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	a8 e6       	ldi	r26, 0x68	; 104
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
 134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
 136:	a8 37       	cpi	r26, 0x78	; 120
 138:	b2 07       	cpc	r27, r18
 13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>

0000013c <__do_global_ctors>:
 13c:	10 e0       	ldi	r17, 0x00	; 0
 13e:	c5 e8       	ldi	r28, 0x85	; 133
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	03 c0       	rjmp	.+6      	; 0x14a <__do_global_ctors+0xe>
 144:	21 97       	sbiw	r28, 0x01	; 1
 146:	fe 01       	movw	r30, r28
 148:	65 d3       	rcall	.+1738   	; 0x814 <__tablejump2__>
 14a:	c4 38       	cpi	r28, 0x84	; 132
 14c:	d1 07       	cpc	r29, r17
 14e:	d1 f7       	brne	.-12     	; 0x144 <__do_global_ctors+0x8>
 150:	1c d0       	rcall	.+56     	; 0x18a <main>
 152:	66 c3       	rjmp	.+1740   	; 0x820 <_exit>

00000154 <__bad_interrupt>:
 154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <_Z10USART_Initv>:
		}
	}
}

void USART_Init(){
	UBRRH = 0;
 156:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
 158:	83 e3       	ldi	r24, 0x33	; 51
 15a:	89 b9       	out	0x09, r24	; 9
	UCSRC |= (1<<URSEL)|(3<<UCSZ0);
 15c:	80 b5       	in	r24, 0x20	; 32
 15e:	86 68       	ori	r24, 0x86	; 134
 160:	80 bd       	out	0x20, r24	; 32
	UCSRB |= (1<<TXEN);
 162:	53 9a       	sbi	0x0a, 3	; 10
 164:	08 95       	ret

00000166 <_Z14USART_Transmitc>:
}

void USART_Transmit(char data){
	while (!(UCSRA & (1<<UDRE)));
 166:	5d 9b       	sbis	0x0b, 5	; 11
 168:	fe cf       	rjmp	.-4      	; 0x166 <_Z14USART_Transmitc>
	UDR = data;
 16a:	8c b9       	out	0x0c, r24	; 12
 16c:	08 95       	ret

0000016e <_Z16USART_SendStringPc>:
}

void USART_SendString(char *data){
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
	register int i = 0;
	while (data[i]){
 174:	88 81       	ld	r24, Y
 176:	88 23       	and	r24, r24
 178:	29 f0       	breq	.+10     	; 0x184 <_Z16USART_SendStringPc+0x16>
 17a:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(data[i]);
 17c:	f4 df       	rcall	.-24     	; 0x166 <_Z14USART_Transmitc>
	UDR = data;
}

void USART_SendString(char *data){
	register int i = 0;
	while (data[i]){
 17e:	89 91       	ld	r24, Y+
 180:	81 11       	cpse	r24, r1
 182:	fc cf       	rjmp	.-8      	; 0x17c <_Z16USART_SendStringPc+0xe>
		USART_Transmit(data[i]);
		i++;
	}
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <main>:


PS2 kb;

int main(void){
	USART_Init();
 18a:	e5 df       	rcall	.-54     	; 0x156 <_Z10USART_Initv>
	USART_SendString("Begin!\n");
 18c:	80 e6       	ldi	r24, 0x60	; 96
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	ee df       	rcall	.-36     	; 0x16e <_Z16USART_SendStringPc>
	kb.init();
 192:	88 e6       	ldi	r24, 0x68	; 104
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	11 d0       	rcall	.+34     	; 0x1ba <_ZN3PS24initEv>
	DDRC |= (1<<5);
 198:	a5 9a       	sbi	0x14, 5	; 20
	sei();
 19a:	78 94       	sei
	while (1)
	{
		if (kb.available()){
 19c:	88 e6       	ldi	r24, 0x68	; 104
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	30 d0       	rcall	.+96     	; 0x202 <_ZN3PS29availableEv>
 1a2:	88 23       	and	r24, r24
 1a4:	d9 f3       	breq	.-10     	; 0x19c <main+0x12>
			USART_Transmit(kb.gerChar());
 1a6:	88 e6       	ldi	r24, 0x68	; 104
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	5f d1       	rcall	.+702    	; 0x46a <_ZN3PS27gerCharEv>
 1ac:	dc df       	rcall	.-72     	; 0x166 <_Z14USART_Transmitc>
 1ae:	f6 cf       	rjmp	.-20     	; 0x19c <main+0x12>

000001b0 <_GLOBAL__sub_I_kb>:
void USART_Init();
void USART_Transmit(char data);
void USART_SendString(char *data);


PS2 kb;
 1b0:	88 e6       	ldi	r24, 0x68	; 104
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	01 d0       	rcall	.+2      	; 0x1b8 <_ZN3PS2C1Ev>
 1b6:	08 95       	ret

000001b8 <_ZN3PS2C1Ev>:

bool PS2::available(){
	return char_Received != 0;
}

void checkExtend(){
 1b8:	08 95       	ret

000001ba <_ZN3PS24initEv>:
 1ba:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <char_Count>
 1be:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <char_Current>
 1c2:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <char_Received>
 1c6:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <kb_Shift>
 1ca:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <kb_Capslock>
 1ce:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <kb_Release>
 1d2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <kb_NumLock>
 1d6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <kb_Extend>
 1da:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <cmd_InProgress>
 1de:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <cmd_Count+0x1>
 1e2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <cmd_Count>
 1e6:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <cmd_Value>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <cmd_ACKValue>
 1f0:	8b 98       	cbi	0x11, 3	; 17
 1f2:	93 9a       	sbi	0x12, 3	; 18
 1f4:	85 b7       	in	r24, 0x35	; 53
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	85 bf       	out	0x35, r24	; 53
 1fa:	8b b7       	in	r24, 0x3b	; 59
 1fc:	80 64       	ori	r24, 0x40	; 64
 1fe:	8b bf       	out	0x3b, r24	; 59
 200:	08 95       	ret

00000202 <_ZN3PS29availableEv>:
 202:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <char_Received>
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	91 11       	cpse	r25, r1
 20a:	01 c0       	rjmp	.+2      	; 0x20e <_ZN3PS29availableEv+0xc>
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret

00000210 <__vector_1>:
	
}

ISR(INT0_vect){
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
	//Send Data
	if (cmd_InProgress){
 220:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <cmd_InProgress>
 224:	88 23       	and	r24, r24
 226:	09 f4       	brne	.+2      	; 0x22a <__vector_1+0x1a>
 228:	44 c0       	rjmp	.+136    	; 0x2b2 <__vector_1+0xa2>
		cmd_Count++;
 22a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <cmd_Count>
 22e:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <cmd_Count+0x1>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <cmd_Count+0x1>
 238:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <cmd_Count>
		switch(cmd_Count){
 23c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <cmd_Count>
 240:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <cmd_Count+0x1>
 244:	8a 30       	cpi	r24, 0x0A	; 10
 246:	91 05       	cpc	r25, r1
 248:	34 f4       	brge	.+12     	; 0x256 <__vector_1+0x46>
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	91 05       	cpc	r25, r1
 24e:	64 f4       	brge	.+24     	; 0x268 <__vector_1+0x58>
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	41 f0       	breq	.+16     	; 0x264 <__vector_1+0x54>
 254:	b1 c0       	rjmp	.+354    	; 0x3b8 <__vector_1+0x1a8>
 256:	8b 30       	cpi	r24, 0x0B	; 11
 258:	91 05       	cpc	r25, r1
 25a:	e9 f0       	breq	.+58     	; 0x296 <__vector_1+0x86>
 25c:	a4 f0       	brlt	.+40     	; 0x286 <__vector_1+0x76>
 25e:	0c 97       	sbiw	r24, 0x0c	; 12
 260:	e9 f0       	breq	.+58     	; 0x29c <__vector_1+0x8c>
 262:	aa c0       	rjmp	.+340    	; 0x3b8 <__vector_1+0x1a8>
			case 1:{ //Start bit (Always = 0)
				PORT_KB &= ~(1<<DATA_PIN);
 264:	93 98       	cbi	0x12, 3	; 18
				break;
 266:	a8 c0       	rjmp	.+336    	; 0x3b8 <__vector_1+0x1a8>
			}
			
			case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9:{
				if (cmd_Value & 0x01){
 268:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <cmd_Value>
 26c:	80 ff       	sbrs	r24, 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <__vector_1+0x64>
					 PORT_KB |= (1<<DATA_PIN);
 270:	93 9a       	sbi	0x12, 3	; 18
 272:	01 c0       	rjmp	.+2      	; 0x276 <__vector_1+0x66>
				}
				else{
					 PORT_KB &= ~(1<<DATA_PIN);
 274:	93 98       	cbi	0x12, 3	; 18
				}
				cmd_Value = cmd_Value >> 1;
 276:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <cmd_Value>
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	95 95       	asr	r25
 27e:	87 95       	ror	r24
 280:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <cmd_Value>
				break;
 284:	99 c0       	rjmp	.+306    	; 0x3b8 <__vector_1+0x1a8>
			}
			
			case 10:{ //Parity bit
				if (cmd_Parity){
 286:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <cmd_Parity>
 28a:	88 23       	and	r24, r24
 28c:	11 f0       	breq	.+4      	; 0x292 <__vector_1+0x82>
					PORT_KB |= (1<<DATA_PIN);
 28e:	93 9a       	sbi	0x12, 3	; 18
 290:	93 c0       	rjmp	.+294    	; 0x3b8 <__vector_1+0x1a8>
				}
				else{
					PORT_KB &= ~(1<<DATA_PIN);
 292:	93 98       	cbi	0x12, 3	; 18
 294:	91 c0       	rjmp	.+290    	; 0x3b8 <__vector_1+0x1a8>
				}
				break;
			}
			
			case 11:{ //Stop bit (Always = 1)
				PORT_KB |= (1<<DATA_PIN);
 296:	93 9a       	sbi	0x12, 3	; 18
				DDR_KB &= ~(1<<DATA_PIN);
 298:	8b 98       	cbi	0x11, 3	; 17
				break;
 29a:	8e c0       	rjmp	.+284    	; 0x3b8 <__vector_1+0x1a8>
			}
				
			case 12:{ //Get ACK From KB
				if (!(PIN_KB & (1<<DATA_PIN))){
 29c:	83 99       	sbic	0x10, 3	; 16
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <__vector_1+0x96>
					 cmd_ACKValue = 0;
 2a0:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <cmd_ACKValue>
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <__vector_1+0x9c>
				}
				else{
					cmd_ACKValue = 1;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <cmd_ACKValue>
				}
				cmd_InProgress = false;
 2ac:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <cmd_InProgress>
 2b0:	83 c0       	rjmp	.+262    	; 0x3b8 <__vector_1+0x1a8>
		return ; 
	}
	
	//Get Data bit
	register uint8_t value;
	if (PIN_KB & (1<<DATA_PIN)){
 2b2:	80 b3       	in	r24, 0x10	; 16
 2b4:	83 fb       	bst	r24, 3
 2b6:	88 27       	eor	r24, r24
 2b8:	80 f9       	bld	r24, 0
	}
	else{
		value = 0x00;
	}
	//Get complete byte
	if (char_Count > 0 && char_Count < 9){
 2ba:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <char_Count>
 2be:	99 23       	and	r25, r25
 2c0:	29 f0       	breq	.+10     	; 0x2cc <__vector_1+0xbc>
 2c2:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <char_Count>
 2c6:	99 30       	cpi	r25, 0x09	; 9
 2c8:	08 f4       	brcc	.+2      	; 0x2cc <__vector_1+0xbc>
 2ca:	67 c0       	rjmp	.+206    	; 0x39a <__vector_1+0x18a>
		char_Current |= (value << (char_Count - 1));
	}
	char_Count ++;
 2cc:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <char_Count>
 2d0:	8f 5f       	subi	r24, 0xFF	; 255
 2d2:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <char_Count>
	if (char_Count == 11){
 2d6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <char_Count>
 2da:	8b 30       	cpi	r24, 0x0B	; 11
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <__vector_1+0xd0>
 2de:	6c c0       	rjmp	.+216    	; 0x3b8 <__vector_1+0x1a8>
		switch(char_Current){
 2e0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <char_Current>
 2e4:	87 37       	cpi	r24, 0x77	; 119
 2e6:	91 f1       	breq	.+100    	; 0x34c <__vector_1+0x13c>
 2e8:	40 f4       	brcc	.+16     	; 0x2fa <__vector_1+0xea>
 2ea:	88 35       	cpi	r24, 0x58	; 88
 2ec:	f1 f0       	breq	.+60     	; 0x32a <__vector_1+0x11a>
 2ee:	89 35       	cpi	r24, 0x59	; 89
 2f0:	99 f0       	breq	.+38     	; 0x318 <__vector_1+0x108>
 2f2:	82 31       	cpi	r24, 0x12	; 18
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <__vector_1+0xe8>
 2f6:	43 c0       	rjmp	.+134    	; 0x37e <__vector_1+0x16e>
 2f8:	0f c0       	rjmp	.+30     	; 0x318 <__vector_1+0x108>
 2fa:	80 3f       	cpi	r24, 0xF0	; 240
 2fc:	29 f0       	breq	.+10     	; 0x308 <__vector_1+0xf8>
 2fe:	8a 3f       	cpi	r24, 0xFA	; 250
 300:	39 f0       	breq	.+14     	; 0x310 <__vector_1+0x100>
 302:	80 3e       	cpi	r24, 0xE0	; 224
 304:	e1 f5       	brne	.+120    	; 0x37e <__vector_1+0x16e>
 306:	32 c0       	rjmp	.+100    	; 0x36c <__vector_1+0x15c>
			case 0xF0:
				kb_Release = true;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <kb_Release>
				break;
 30e:	40 c0       	rjmp	.+128    	; 0x390 <__vector_1+0x180>
			case 0xFA:
				cmd_ACKOk = true;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <cmd_ACKOk>
				break;
 316:	3c c0       	rjmp	.+120    	; 0x390 <__vector_1+0x180>
			case 0x12: case 0x59: //LShift - RShift
				kb_Shift = kb_Release ? false : true;
 318:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <kb_Release>
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	89 27       	eor	r24, r25
 320:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <kb_Shift>
				kb_Release = false;
 324:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <kb_Release>
				break;
 328:	33 c0       	rjmp	.+102    	; 0x390 <__vector_1+0x180>
			case 0x58:
				if (kb_Release){
 32a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <kb_Release>
 32e:	88 23       	and	r24, r24
 330:	19 f0       	breq	.+6      	; 0x338 <__vector_1+0x128>
					kb_Release = false;
 332:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <kb_Release>
 336:	2c c0       	rjmp	.+88     	; 0x390 <__vector_1+0x180>
				}
				else{
					kb_Capslock = !(kb_Capslock);
 338:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <kb_Capslock>
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	89 27       	eor	r24, r25
 340:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <kb_Capslock>
					char_Received = char_Current;
 344:	88 e5       	ldi	r24, 0x58	; 88
 346:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <char_Received>
 34a:	22 c0       	rjmp	.+68     	; 0x390 <__vector_1+0x180>
				}
				break;
			case 0x77:
				if (!kb_Release){
 34c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <kb_Release>
 350:	81 11       	cpse	r24, r1
 352:	09 c0       	rjmp	.+18     	; 0x366 <__vector_1+0x156>
					kb_NumLock = !kb_NumLock;
 354:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <kb_NumLock>
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	89 27       	eor	r24, r25
 35c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <kb_NumLock>
					char_Received = char_Current;
 360:	87 e7       	ldi	r24, 0x77	; 119
 362:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <char_Received>
				}
				kb_Release = false;
 366:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <kb_Release>
				break;
 36a:	12 c0       	rjmp	.+36     	; 0x390 <__vector_1+0x180>
			case 0xE0:
				kb_Extend = !kb_Extend;
 36c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <kb_Extend>
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	89 27       	eor	r24, r25
 374:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <kb_Extend>
				kb_Release = false;
 378:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <kb_Release>
				break;
 37c:	09 c0       	rjmp	.+18     	; 0x390 <__vector_1+0x180>
			default:
				if (kb_Release) {
 37e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <kb_Release>
 382:	99 23       	and	r25, r25
 384:	19 f0       	breq	.+6      	; 0x38c <__vector_1+0x17c>
					kb_Release = false;
 386:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <kb_Release>
 38a:	02 c0       	rjmp	.+4      	; 0x390 <__vector_1+0x180>
				}
				else{
					char_Received = char_Current;
 38c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <char_Received>
				}
		}
		char_Current = 0;
 390:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <char_Current>
		char_Count  = 0;
 394:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <char_Count>
 398:	0f c0       	rjmp	.+30     	; 0x3b8 <__vector_1+0x1a8>
	else{
		value = 0x00;
	}
	//Get complete byte
	if (char_Count > 0 && char_Count < 9){
		char_Current |= (value << (char_Count - 1));
 39a:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <char_Count>
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	21 50       	subi	r18, 0x01	; 1
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <__vector_1+0x198>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	2a 95       	dec	r18
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <__vector_1+0x194>
 3ac:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <char_Current>
 3b0:	89 2b       	or	r24, r25
 3b2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <char_Current>
 3b6:	8a cf       	rjmp	.-236    	; 0x2cc <__vector_1+0xbc>
				}
		}
		char_Current = 0;
		char_Count  = 0;
	}
}
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	2f 91       	pop	r18
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <_ZN3PS29oddParityEh>:
	char_Received = 0;
	return result;
}

uint8_t PS2::oddParity(uint8_t data){
	int i,  count = 1;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
	for (i = 0; i < 8; i++){
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
		if ((data >> i) & 0x01){
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	ab 01       	movw	r20, r22
 3d4:	02 2e       	mov	r0, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <_ZN3PS29oddParityEh+0x14>
 3d8:	55 95       	asr	r21
 3da:	47 95       	ror	r20
 3dc:	0a 94       	dec	r0
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <_ZN3PS29oddParityEh+0x10>
 3e0:	40 fd       	sbrc	r20, 0
			count++;
 3e2:	01 96       	adiw	r24, 0x01	; 1
	return result;
}

uint8_t PS2::oddParity(uint8_t data){
	int i,  count = 1;
	for (i = 0; i < 8; i++){
 3e4:	2f 5f       	subi	r18, 0xFF	; 255
 3e6:	3f 4f       	sbci	r19, 0xFF	; 255
 3e8:	28 30       	cpi	r18, 0x08	; 8
 3ea:	31 05       	cpc	r19, r1
 3ec:	91 f7       	brne	.-28     	; 0x3d2 <_ZN3PS29oddParityEh+0xa>
		if ((data >> i) & 0x01){
			count++;
		}
	}
	return count & 0x01;
}
 3ee:	81 70       	andi	r24, 0x01	; 1
 3f0:	08 95       	ret

000003f2 <_ZN3PS211sendCommandEh>:

void PS2::sendCommand(uint8_t data){
 3f2:	cf 93       	push	r28
	cmd_InProgress = true;
 3f4:	c1 e0       	ldi	r28, 0x01	; 1
 3f6:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <cmd_InProgress>
	cmd_Count = 0;
 3fa:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <cmd_Count+0x1>
 3fe:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <cmd_Count>
	cmd_Value = data;
 402:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <cmd_Value>
	cmd_ACKValue = oddParity(data);
 406:	e0 df       	rcall	.-64     	; 0x3c8 <_ZN3PS29oddParityEh>
 408:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <cmd_ACKValue>
	cmd_ACKValue = 1;
 40c:	c0 93 6a 00 	sts	0x006A, r28	; 0x80006a <cmd_ACKValue>
	
	DDR_KB |= ((1<<DATA_PIN)|(1<<CLK_PIN));
 410:	81 b3       	in	r24, 0x11	; 17
 412:	8c 60       	ori	r24, 0x0C	; 12
 414:	81 bb       	out	0x11, r24	; 17
	
	PORT_KB |= (1<<DATA_PIN); // Maybe
 416:	93 9a       	sbi	0x12, 3	; 18
	PORT_KB &= ~(1<<CLK_PIN); // Inhibit all communication
 418:	92 98       	cbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41a:	2f e7       	ldi	r18, 0x7F	; 127
 41c:	88 e3       	ldi	r24, 0x38	; 56
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	21 50       	subi	r18, 0x01	; 1
 422:	80 40       	sbci	r24, 0x00	; 0
 424:	90 40       	sbci	r25, 0x00	; 0
 426:	e1 f7       	brne	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
	
	_delay_ms(50);
	
	PORT_KB &= ~(1<<DATA_PIN);
 42c:	93 98       	cbi	0x12, 3	; 18
	
	//Release Clock Line
	PORT_KB |= (1<<CLK_PIN);
 42e:	92 9a       	sbi	0x12, 2	; 18
	DDR_KB &= ~(1<<CLK_PIN);
 430:	8a 98       	cbi	0x11, 2	; 17
	
	//Interrupt happen here
	
	while(cmd_ACKValue != 0);
 432:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <cmd_ACKValue>
 436:	81 11       	cpse	r24, r1
 438:	fc cf       	rjmp	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	
	cmd_InProgress = false;
 43a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <cmd_InProgress>
}
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <_ZN3PS28setLightEh>:

void PS2::setLight(uint8_t data){
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	ec 01       	movw	r28, r24
 44a:	16 2f       	mov	r17, r22
	cmd_ACKOk = false;
 44c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cmd_ACKOk>
	sendCommand(0xED);
 450:	6d ee       	ldi	r22, 0xED	; 237
 452:	cf df       	rcall	.-98     	; 0x3f2 <_ZN3PS211sendCommandEh>
	while(!cmd_ACKOk);
 454:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <cmd_ACKOk>
 458:	88 23       	and	r24, r24
 45a:	e1 f3       	breq	.-8      	; 0x454 <_ZN3PS28setLightEh+0x12>
	sendCommand(data);
 45c:	61 2f       	mov	r22, r17
 45e:	ce 01       	movw	r24, r28
 460:	c8 df       	rcall	.-112    	; 0x3f2 <_ZN3PS211sendCommandEh>
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	1f 91       	pop	r17
 468:	08 95       	ret

0000046a <_ZN3PS27gerCharEv>:
	}
}


//We'll use this function when we got char_Received from ISR already
uint8_t PS2::gerChar(){
 46a:	cf 93       	push	r28
	uint8_t result;
	result = char_Received;
 46c:	c0 91 75 00 	lds	r28, 0x0075	; 0x800075 <char_Received>
	switch(result){
 470:	4c 2f       	mov	r20, r28
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	fa 01       	movw	r30, r20
 476:	3d 97       	sbiw	r30, 0x0d	; 13
 478:	e1 37       	cpi	r30, 0x71	; 113
 47a:	f1 05       	cpc	r31, r1
 47c:	08 f0       	brcs	.+2      	; 0x480 <_ZN3PS27gerCharEv+0x16>
 47e:	4c c1       	rjmp	.+664    	; 0x718 <_ZN3PS27gerCharEv+0x2ae>
 480:	ed 5e       	subi	r30, 0xED	; 237
 482:	ff 4f       	sbci	r31, 0xFF	; 255
 484:	09 94       	ijmp
		case 0x49: result = !kb_Shift ? '.' : '>'; break; 
		case 0x4A: result = !kb_Shift ? '/' : '?'; break;
		
		
		case 0x29: result = ' '; break;
		case 0x5A: result = '\n'; break;
 486:	ca e0       	ldi	r28, 0x0A	; 10
 488:	c0 c1       	rjmp	.+896    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
	uint8_t result;
	result = char_Received;
	switch(result){
		case 0x1C: result = 'a'; break;
		case 0x32: result = 'b'; break;
		case 0x21: result = 'c'; break;
 48a:	c3 e6       	ldi	r28, 0x63	; 99
 48c:	51 c1       	rjmp	.+674    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x23: result = 'd'; break;
		case 0x24: result = 'e'; break;
 48e:	c5 e6       	ldi	r28, 0x65	; 101
 490:	4f c1       	rjmp	.+670    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x2B: result = 'f'; break;
 492:	c6 e6       	ldi	r28, 0x66	; 102
 494:	4d c1       	rjmp	.+666    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x34: result = 'g'; break;
 496:	c7 e6       	ldi	r28, 0x67	; 103
 498:	4b c1       	rjmp	.+662    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x33: result = 'h'; break;
 49a:	c8 e6       	ldi	r28, 0x68	; 104
 49c:	49 c1       	rjmp	.+658    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x43: result = 'i'; break;
 49e:	c9 e6       	ldi	r28, 0x69	; 105
 4a0:	47 c1       	rjmp	.+654    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x3B: result = 'j'; break;
 4a2:	ca e6       	ldi	r28, 0x6A	; 106
 4a4:	45 c1       	rjmp	.+650    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x42: result = 'k'; break;
 4a6:	cb e6       	ldi	r28, 0x6B	; 107
 4a8:	43 c1       	rjmp	.+646    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x4B: result = 'l'; break;
 4aa:	cc e6       	ldi	r28, 0x6C	; 108
 4ac:	41 c1       	rjmp	.+642    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x3A: result = 'm'; break;
 4ae:	cd e6       	ldi	r28, 0x6D	; 109
 4b0:	3f c1       	rjmp	.+638    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x31: result = 'n'; break;
 4b2:	ce e6       	ldi	r28, 0x6E	; 110
 4b4:	3d c1       	rjmp	.+634    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x44: result = 'o'; break;
 4b6:	cf e6       	ldi	r28, 0x6F	; 111
 4b8:	3b c1       	rjmp	.+630    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x4D: result = 'p'; break;
 4ba:	c0 e7       	ldi	r28, 0x70	; 112
 4bc:	39 c1       	rjmp	.+626    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x15: result = 'q'; break;
 4be:	c1 e7       	ldi	r28, 0x71	; 113
 4c0:	37 c1       	rjmp	.+622    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x2D: result = 'r'; break;
 4c2:	c2 e7       	ldi	r28, 0x72	; 114
 4c4:	35 c1       	rjmp	.+618    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x1B: result = 's'; break;
 4c6:	c3 e7       	ldi	r28, 0x73	; 115
 4c8:	33 c1       	rjmp	.+614    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x2C: result = 't'; break;
 4ca:	c4 e7       	ldi	r28, 0x74	; 116
 4cc:	31 c1       	rjmp	.+610    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x3C: result = 'u'; break;
 4ce:	c5 e7       	ldi	r28, 0x75	; 117
 4d0:	2f c1       	rjmp	.+606    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x2A: result = 'v'; break;
 4d2:	c6 e7       	ldi	r28, 0x76	; 118
 4d4:	2d c1       	rjmp	.+602    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x1D: result = 'w'; break;
 4d6:	c7 e7       	ldi	r28, 0x77	; 119
 4d8:	2b c1       	rjmp	.+598    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x22: result = 'x'; break;
 4da:	c8 e7       	ldi	r28, 0x78	; 120
 4dc:	29 c1       	rjmp	.+594    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x35: result = 'y'; break;
 4de:	c9 e7       	ldi	r28, 0x79	; 121
 4e0:	27 c1       	rjmp	.+590    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x1A: result = 'z'; break;
 4e2:	ca e7       	ldi	r28, 0x7A	; 122
 4e4:	25 c1       	rjmp	.+586    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		
		
		case 0x16: result = !kb_Shift ? '1' : '!'; break;
 4e6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 4ea:	88 23       	and	r24, r24
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <_ZN3PS27gerCharEv+0x86>
 4ee:	36 c1       	rjmp	.+620    	; 0x75c <_ZN3PS27gerCharEv+0x2f2>
 4f0:	c1 e2       	ldi	r28, 0x21	; 33
 4f2:	8b c1       	rjmp	.+790    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x1E: result = !kb_Shift ? '2' : '@'; break;
 4f4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 4f8:	88 23       	and	r24, r24
 4fa:	09 f4       	brne	.+2      	; 0x4fe <_ZN3PS27gerCharEv+0x94>
 4fc:	31 c1       	rjmp	.+610    	; 0x760 <_ZN3PS27gerCharEv+0x2f6>
 4fe:	c0 e4       	ldi	r28, 0x40	; 64
 500:	84 c1       	rjmp	.+776    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x26: result = !kb_Shift ? '3' : '#'; break;
 502:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 506:	88 23       	and	r24, r24
 508:	09 f4       	brne	.+2      	; 0x50c <_ZN3PS27gerCharEv+0xa2>
 50a:	2c c1       	rjmp	.+600    	; 0x764 <_ZN3PS27gerCharEv+0x2fa>
 50c:	c3 e2       	ldi	r28, 0x23	; 35
 50e:	7d c1       	rjmp	.+762    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x25: result = !kb_Shift ? '4' : '$'; break;
 510:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 514:	88 23       	and	r24, r24
 516:	09 f4       	brne	.+2      	; 0x51a <_ZN3PS27gerCharEv+0xb0>
 518:	27 c1       	rjmp	.+590    	; 0x768 <_ZN3PS27gerCharEv+0x2fe>
 51a:	c4 e2       	ldi	r28, 0x24	; 36
 51c:	76 c1       	rjmp	.+748    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x2E: result = !kb_Shift ? '5' : '%'; break;
 51e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 522:	88 23       	and	r24, r24
 524:	09 f4       	brne	.+2      	; 0x528 <_ZN3PS27gerCharEv+0xbe>
 526:	22 c1       	rjmp	.+580    	; 0x76c <_ZN3PS27gerCharEv+0x302>
 528:	c5 e2       	ldi	r28, 0x25	; 37
 52a:	6f c1       	rjmp	.+734    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x36: result = !kb_Shift ? '6' : '^'; break;
 52c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 530:	88 23       	and	r24, r24
 532:	09 f4       	brne	.+2      	; 0x536 <_ZN3PS27gerCharEv+0xcc>
 534:	6a c1       	rjmp	.+724    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
 536:	ce e5       	ldi	r28, 0x5E	; 94
 538:	68 c1       	rjmp	.+720    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x3D: result = !kb_Shift ? '7' : '&'; break;
 53a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 53e:	88 23       	and	r24, r24
 540:	09 f4       	brne	.+2      	; 0x544 <_ZN3PS27gerCharEv+0xda>
 542:	16 c1       	rjmp	.+556    	; 0x770 <_ZN3PS27gerCharEv+0x306>
 544:	c6 e2       	ldi	r28, 0x26	; 38
 546:	61 c1       	rjmp	.+706    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x3E: result = !kb_Shift ? '8' : '*'; break;
 548:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 54c:	88 23       	and	r24, r24
 54e:	09 f4       	brne	.+2      	; 0x552 <_ZN3PS27gerCharEv+0xe8>
 550:	11 c1       	rjmp	.+546    	; 0x774 <_ZN3PS27gerCharEv+0x30a>
 552:	ca e2       	ldi	r28, 0x2A	; 42
 554:	5a c1       	rjmp	.+692    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x46: result = !kb_Shift ? '9' : '('; break;
 556:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 55a:	88 23       	and	r24, r24
 55c:	09 f4       	brne	.+2      	; 0x560 <_ZN3PS27gerCharEv+0xf6>
 55e:	0c c1       	rjmp	.+536    	; 0x778 <_ZN3PS27gerCharEv+0x30e>
 560:	c8 e2       	ldi	r28, 0x28	; 40
 562:	53 c1       	rjmp	.+678    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x45: result = !kb_Shift ? '0' : ')'; break;
 564:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 568:	88 23       	and	r24, r24
 56a:	09 f4       	brne	.+2      	; 0x56e <_ZN3PS27gerCharEv+0x104>
 56c:	07 c1       	rjmp	.+526    	; 0x77c <_ZN3PS27gerCharEv+0x312>
 56e:	c9 e2       	ldi	r28, 0x29	; 41
 570:	4c c1       	rjmp	.+664    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		
		case 0x0E: result = !kb_Shift ? '`' : '~'; break;
 572:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 576:	88 23       	and	r24, r24
 578:	09 f4       	brne	.+2      	; 0x57c <_ZN3PS27gerCharEv+0x112>
 57a:	02 c1       	rjmp	.+516    	; 0x780 <_ZN3PS27gerCharEv+0x316>
 57c:	ce e7       	ldi	r28, 0x7E	; 126
 57e:	45 c1       	rjmp	.+650    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x4E: result = !kb_Shift ? '-' : '_'; break; 
 580:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 584:	88 23       	and	r24, r24
 586:	09 f4       	brne	.+2      	; 0x58a <_ZN3PS27gerCharEv+0x120>
 588:	fd c0       	rjmp	.+506    	; 0x784 <_ZN3PS27gerCharEv+0x31a>
 58a:	cf e5       	ldi	r28, 0x5F	; 95
 58c:	3e c1       	rjmp	.+636    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x55: result = !kb_Shift ? '+' : '='; break; 
 58e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 592:	88 23       	and	r24, r24
 594:	09 f4       	brne	.+2      	; 0x598 <_ZN3PS27gerCharEv+0x12e>
 596:	f8 c0       	rjmp	.+496    	; 0x788 <_ZN3PS27gerCharEv+0x31e>
 598:	cd e3       	ldi	r28, 0x3D	; 61
 59a:	37 c1       	rjmp	.+622    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x5D: result = !kb_Shift ? '\\' : '|'; break; 
 59c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 5a0:	88 23       	and	r24, r24
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <_ZN3PS27gerCharEv+0x13c>
 5a4:	f3 c0       	rjmp	.+486    	; 0x78c <_ZN3PS27gerCharEv+0x322>
 5a6:	cc e7       	ldi	r28, 0x7C	; 124
 5a8:	30 c1       	rjmp	.+608    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x54: result = !kb_Shift ? '[' : '{'; break; 
 5aa:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 5ae:	88 23       	and	r24, r24
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <_ZN3PS27gerCharEv+0x14a>
 5b2:	ee c0       	rjmp	.+476    	; 0x790 <_ZN3PS27gerCharEv+0x326>
 5b4:	cb e7       	ldi	r28, 0x7B	; 123
 5b6:	29 c1       	rjmp	.+594    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x5B: result = !kb_Shift ? ']' : '}'; break; 
 5b8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 5bc:	88 23       	and	r24, r24
 5be:	09 f4       	brne	.+2      	; 0x5c2 <_ZN3PS27gerCharEv+0x158>
 5c0:	e9 c0       	rjmp	.+466    	; 0x794 <_ZN3PS27gerCharEv+0x32a>
 5c2:	cd e7       	ldi	r28, 0x7D	; 125
 5c4:	22 c1       	rjmp	.+580    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x4C: result = !kb_Shift ? ';' : ':'; break; 
 5c6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 5ca:	88 23       	and	r24, r24
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <_ZN3PS27gerCharEv+0x166>
 5ce:	e4 c0       	rjmp	.+456    	; 0x798 <_ZN3PS27gerCharEv+0x32e>
 5d0:	ca e3       	ldi	r28, 0x3A	; 58
 5d2:	1b c1       	rjmp	.+566    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x52: result = !kb_Shift ? '\'' : '\"'; break;
 5d4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 5d8:	88 23       	and	r24, r24
 5da:	09 f4       	brne	.+2      	; 0x5de <_ZN3PS27gerCharEv+0x174>
 5dc:	df c0       	rjmp	.+446    	; 0x79c <_ZN3PS27gerCharEv+0x332>
 5de:	c2 e2       	ldi	r28, 0x22	; 34
 5e0:	14 c1       	rjmp	.+552    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x41: result = !kb_Shift ? ',' : '<'; break; 
 5e2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 5e6:	88 23       	and	r24, r24
 5e8:	09 f4       	brne	.+2      	; 0x5ec <_ZN3PS27gerCharEv+0x182>
 5ea:	da c0       	rjmp	.+436    	; 0x7a0 <_ZN3PS27gerCharEv+0x336>
 5ec:	cc e3       	ldi	r28, 0x3C	; 60
 5ee:	0d c1       	rjmp	.+538    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x49: result = !kb_Shift ? '.' : '>'; break; 
 5f0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 5f4:	88 23       	and	r24, r24
 5f6:	09 f4       	brne	.+2      	; 0x5fa <_ZN3PS27gerCharEv+0x190>
 5f8:	d5 c0       	rjmp	.+426    	; 0x7a4 <_ZN3PS27gerCharEv+0x33a>
 5fa:	ce e3       	ldi	r28, 0x3E	; 62
 5fc:	06 c1       	rjmp	.+524    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x4A: result = !kb_Shift ? '/' : '?'; break;
 5fe:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 602:	88 23       	and	r24, r24
 604:	09 f4       	brne	.+2      	; 0x608 <_ZN3PS27gerCharEv+0x19e>
 606:	d0 c0       	rjmp	.+416    	; 0x7a8 <_ZN3PS27gerCharEv+0x33e>
 608:	cf e3       	ldi	r28, 0x3F	; 63
 60a:	ff c0       	rjmp	.+510    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		
		
		case 0x29: result = ' '; break;
		case 0x5A: result = '\n'; break;
		case 0x0D: result = '\t'; break;
		case 0x66: result = KB_BACKSPACE; break;
 60c:	c0 e8       	ldi	r28, 0x80	; 128
 60e:	fd c0       	rjmp	.+506    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		
		case 0x7C: result = '*'; break;
 610:	ca e2       	ldi	r28, 0x2A	; 42
 612:	fb c0       	rjmp	.+502    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x7B: result = '-'; break;
 614:	cd e2       	ldi	r28, 0x2D	; 45
 616:	f9 c0       	rjmp	.+498    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x79: result = '+'; break;
 618:	cb e2       	ldi	r28, 0x2B	; 43
 61a:	f7 c0       	rjmp	.+494    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x71:
			if(kb_Extend) result = KB_DELETE;
 61c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <kb_Extend>
 620:	81 11       	cpse	r24, r1
 622:	c4 c0       	rjmp	.+392    	; 0x7ac <_ZN3PS27gerCharEv+0x342>
			else result = kb_NumLock ? '.' : 0x00;
 624:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <kb_NumLock>
 628:	81 11       	cpse	r24, r1
 62a:	c2 c0       	rjmp	.+388    	; 0x7b0 <_ZN3PS27gerCharEv+0x346>
 62c:	c0 e0       	ldi	r28, 0x00	; 0
 62e:	ed c0       	rjmp	.+474    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x70: 
			if(kb_Extend) result = KB_INSERT;
 630:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <kb_Extend>
 634:	81 11       	cpse	r24, r1
 636:	be c0       	rjmp	.+380    	; 0x7b4 <_ZN3PS27gerCharEv+0x34a>
			else result = kb_NumLock ? '0' : 0x00;
 638:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <kb_NumLock>
 63c:	81 11       	cpse	r24, r1
 63e:	bc c0       	rjmp	.+376    	; 0x7b8 <_ZN3PS27gerCharEv+0x34e>
 640:	c0 e0       	ldi	r28, 0x00	; 0
 642:	e3 c0       	rjmp	.+454    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x69:
			if(kb_Extend) result = KB_END;
 644:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <kb_Extend>
 648:	81 11       	cpse	r24, r1
 64a:	b8 c0       	rjmp	.+368    	; 0x7bc <_ZN3PS27gerCharEv+0x352>
			else result = kb_NumLock ? '1' : 0x00;
 64c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <kb_NumLock>
 650:	81 11       	cpse	r24, r1
 652:	b6 c0       	rjmp	.+364    	; 0x7c0 <_ZN3PS27gerCharEv+0x356>
 654:	c0 e0       	ldi	r28, 0x00	; 0
 656:	d9 c0       	rjmp	.+434    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x72:
			if(kb_Extend) result = KB_DOWN;
 658:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <kb_Extend>
 65c:	81 11       	cpse	r24, r1
 65e:	b2 c0       	rjmp	.+356    	; 0x7c4 <_ZN3PS27gerCharEv+0x35a>
			else result = kb_NumLock ? '2' : 0x00;
 660:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <kb_NumLock>
 664:	81 11       	cpse	r24, r1
 666:	b0 c0       	rjmp	.+352    	; 0x7c8 <_ZN3PS27gerCharEv+0x35e>
 668:	c0 e0       	ldi	r28, 0x00	; 0
 66a:	cf c0       	rjmp	.+414    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x7A:
			if(kb_Extend) result = KB_PG_DN;
 66c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <kb_Extend>
 670:	81 11       	cpse	r24, r1
 672:	ac c0       	rjmp	.+344    	; 0x7cc <_ZN3PS27gerCharEv+0x362>
			else result = kb_NumLock ? '3' : 0x00;
 674:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <kb_NumLock>
 678:	81 11       	cpse	r24, r1
 67a:	aa c0       	rjmp	.+340    	; 0x7d0 <_ZN3PS27gerCharEv+0x366>
 67c:	c0 e0       	ldi	r28, 0x00	; 0
 67e:	c5 c0       	rjmp	.+394    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x6B:
			if(kb_Extend) result = KB_LEFT;
 680:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <kb_Extend>
 684:	81 11       	cpse	r24, r1
 686:	a6 c0       	rjmp	.+332    	; 0x7d4 <_ZN3PS27gerCharEv+0x36a>
			else result = kb_NumLock ? '4' : 0x00;
 688:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <kb_NumLock>
 68c:	81 11       	cpse	r24, r1
 68e:	a4 c0       	rjmp	.+328    	; 0x7d8 <_ZN3PS27gerCharEv+0x36e>
 690:	c0 e0       	ldi	r28, 0x00	; 0
 692:	bb c0       	rjmp	.+374    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x73:
			result = kb_NumLock ? '5' : 0x00;
 694:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <kb_NumLock>
 698:	81 11       	cpse	r24, r1
 69a:	a0 c0       	rjmp	.+320    	; 0x7dc <_ZN3PS27gerCharEv+0x372>
 69c:	c0 e0       	ldi	r28, 0x00	; 0
 69e:	b5 c0       	rjmp	.+362    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x74:
			if(kb_Extend) result = KB_RIGHT;
 6a0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <kb_Extend>
 6a4:	81 11       	cpse	r24, r1
 6a6:	9c c0       	rjmp	.+312    	; 0x7e0 <_ZN3PS27gerCharEv+0x376>
			else result = kb_NumLock ? '6' : 0x00;
 6a8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <kb_NumLock>
 6ac:	81 11       	cpse	r24, r1
 6ae:	9a c0       	rjmp	.+308    	; 0x7e4 <_ZN3PS27gerCharEv+0x37a>
 6b0:	c0 e0       	ldi	r28, 0x00	; 0
 6b2:	ab c0       	rjmp	.+342    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x6C:
			if(kb_Extend) result = KB_HOME;
 6b4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <kb_Extend>
 6b8:	81 11       	cpse	r24, r1
 6ba:	96 c0       	rjmp	.+300    	; 0x7e8 <_ZN3PS27gerCharEv+0x37e>
			else result = kb_NumLock ? '7' : 0x00;
 6bc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <kb_NumLock>
 6c0:	81 11       	cpse	r24, r1
 6c2:	94 c0       	rjmp	.+296    	; 0x7ec <_ZN3PS27gerCharEv+0x382>
 6c4:	c0 e0       	ldi	r28, 0x00	; 0
 6c6:	a1 c0       	rjmp	.+322    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x75:
			if(kb_Extend) result = KB_UP;
 6c8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <kb_Extend>
 6cc:	81 11       	cpse	r24, r1
 6ce:	90 c0       	rjmp	.+288    	; 0x7f0 <_ZN3PS27gerCharEv+0x386>
			else result = kb_NumLock ? '8' : 0x00;
 6d0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <kb_NumLock>
 6d4:	81 11       	cpse	r24, r1
 6d6:	8e c0       	rjmp	.+284    	; 0x7f4 <_ZN3PS27gerCharEv+0x38a>
 6d8:	c0 e0       	ldi	r28, 0x00	; 0
 6da:	97 c0       	rjmp	.+302    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x7D:
			if(kb_Extend) result = KB_PG_UP;
 6dc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <kb_Extend>
 6e0:	81 11       	cpse	r24, r1
 6e2:	8a c0       	rjmp	.+276    	; 0x7f8 <_ZN3PS27gerCharEv+0x38e>
			else result = kb_NumLock ? '9' : 0x00;
 6e4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <kb_NumLock>
 6e8:	81 11       	cpse	r24, r1
 6ea:	88 c0       	rjmp	.+272    	; 0x7fc <_ZN3PS27gerCharEv+0x392>
 6ec:	c0 e0       	ldi	r28, 0x00	; 0
 6ee:	8d c0       	rjmp	.+282    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
			
			
		case 0x58:
			if (kb_Capslock) setLight(0x04);
 6f0:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <kb_Capslock>
 6f4:	22 23       	and	r18, r18
 6f6:	19 f0       	breq	.+6      	; 0x6fe <_ZN3PS27gerCharEv+0x294>
 6f8:	64 e0       	ldi	r22, 0x04	; 4
 6fa:	a3 de       	rcall	.-698    	; 0x442 <_ZN3PS28setLightEh>
 6fc:	86 c0       	rjmp	.+268    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			else setLight(0x00);
 6fe:	60 e0       	ldi	r22, 0x00	; 0
 700:	a0 de       	rcall	.-704    	; 0x442 <_ZN3PS28setLightEh>
 702:	83 c0       	rjmp	.+262    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x77:
			if (kb_NumLock) setLight(0x02);
 704:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <kb_NumLock>
 708:	22 23       	and	r18, r18
 70a:	19 f0       	breq	.+6      	; 0x712 <_ZN3PS27gerCharEv+0x2a8>
 70c:	62 e0       	ldi	r22, 0x02	; 2
 70e:	99 de       	rcall	.-718    	; 0x442 <_ZN3PS28setLightEh>
 710:	0f c0       	rjmp	.+30     	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
			else setLight(0x00);
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	96 de       	rcall	.-724    	; 0x442 <_ZN3PS28setLightEh>
 716:	0c c0       	rjmp	.+24     	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
 718:	2f ef       	ldi	r18, 0xFF	; 255
 71a:	84 e3       	ldi	r24, 0x34	; 52
 71c:	9c e0       	ldi	r25, 0x0C	; 12
 71e:	21 50       	subi	r18, 0x01	; 1
 720:	80 40       	sbci	r24, 0x00	; 0
 722:	90 40       	sbci	r25, 0x00	; 0
 724:	e1 f7       	brne	.-8      	; 0x71e <_ZN3PS27gerCharEv+0x2b4>
 726:	00 c0       	rjmp	.+0      	; 0x728 <_ZN3PS27gerCharEv+0x2be>
 728:	00 00       	nop
			break;
		default:
			result = 0x00;
 72a:	c0 e0       	ldi	r28, 0x00	; 0
 72c:	6e c0       	rjmp	.+220    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
//We'll use this function when we got char_Received from ISR already
uint8_t PS2::gerChar(){
	uint8_t result;
	result = char_Received;
	switch(result){
		case 0x1C: result = 'a'; break;
 72e:	c1 e6       	ldi	r28, 0x61	; 97
		default:
			result = 0x00;
			_delay_ms(500);
	}
	if ((result >= 'a')&&(result <= 'z')){
		if ((kb_Shift && !kb_Capslock) || (!kb_Shift && kb_Capslock)){
 730:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 734:	88 23       	and	r24, r24
 736:	29 f0       	breq	.+10     	; 0x742 <_ZN3PS27gerCharEv+0x2d8>
 738:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <kb_Capslock>
 73c:	88 23       	and	r24, r24
 73e:	09 f4       	brne	.+2      	; 0x742 <_ZN3PS27gerCharEv+0x2d8>
 740:	63 c0       	rjmp	.+198    	; 0x808 <_ZN3PS27gerCharEv+0x39e>
 742:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <kb_Shift>
 746:	81 11       	cpse	r24, r1
 748:	60 c0       	rjmp	.+192    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
 74a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <kb_Capslock>
 74e:	81 11       	cpse	r24, r1
 750:	5b c0       	rjmp	.+182    	; 0x808 <_ZN3PS27gerCharEv+0x39e>
 752:	5b c0       	rjmp	.+182    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x41: result = !kb_Shift ? ',' : '<'; break; 
		case 0x49: result = !kb_Shift ? '.' : '>'; break; 
		case 0x4A: result = !kb_Shift ? '/' : '?'; break;
		
		
		case 0x29: result = ' '; break;
 754:	c0 e2       	ldi	r28, 0x20	; 32
 756:	59 c0       	rjmp	.+178    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x5A: result = '\n'; break;
		case 0x0D: result = '\t'; break;
 758:	c9 e0       	ldi	r28, 0x09	; 9
 75a:	57 c0       	rjmp	.+174    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x22: result = 'x'; break;
		case 0x35: result = 'y'; break;
		case 0x1A: result = 'z'; break;
		
		
		case 0x16: result = !kb_Shift ? '1' : '!'; break;
 75c:	c1 e3       	ldi	r28, 0x31	; 49
 75e:	55 c0       	rjmp	.+170    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x1E: result = !kb_Shift ? '2' : '@'; break;
 760:	c2 e3       	ldi	r28, 0x32	; 50
 762:	53 c0       	rjmp	.+166    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x26: result = !kb_Shift ? '3' : '#'; break;
 764:	c3 e3       	ldi	r28, 0x33	; 51
 766:	51 c0       	rjmp	.+162    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x25: result = !kb_Shift ? '4' : '$'; break;
 768:	c4 e3       	ldi	r28, 0x34	; 52
 76a:	4f c0       	rjmp	.+158    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x2E: result = !kb_Shift ? '5' : '%'; break;
 76c:	c5 e3       	ldi	r28, 0x35	; 53
 76e:	4d c0       	rjmp	.+154    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x36: result = !kb_Shift ? '6' : '^'; break;
		case 0x3D: result = !kb_Shift ? '7' : '&'; break;
 770:	c7 e3       	ldi	r28, 0x37	; 55
 772:	4b c0       	rjmp	.+150    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x3E: result = !kb_Shift ? '8' : '*'; break;
 774:	c8 e3       	ldi	r28, 0x38	; 56
 776:	49 c0       	rjmp	.+146    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x46: result = !kb_Shift ? '9' : '('; break;
 778:	c9 e3       	ldi	r28, 0x39	; 57
 77a:	47 c0       	rjmp	.+142    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x45: result = !kb_Shift ? '0' : ')'; break;
 77c:	c0 e3       	ldi	r28, 0x30	; 48
 77e:	45 c0       	rjmp	.+138    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		
		case 0x0E: result = !kb_Shift ? '`' : '~'; break;
 780:	c0 e6       	ldi	r28, 0x60	; 96
 782:	43 c0       	rjmp	.+134    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x4E: result = !kb_Shift ? '-' : '_'; break; 
 784:	cd e2       	ldi	r28, 0x2D	; 45
 786:	41 c0       	rjmp	.+130    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x55: result = !kb_Shift ? '+' : '='; break; 
 788:	cb e2       	ldi	r28, 0x2B	; 43
 78a:	3f c0       	rjmp	.+126    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x5D: result = !kb_Shift ? '\\' : '|'; break; 
 78c:	cc e5       	ldi	r28, 0x5C	; 92
 78e:	3d c0       	rjmp	.+122    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x54: result = !kb_Shift ? '[' : '{'; break; 
 790:	cb e5       	ldi	r28, 0x5B	; 91
 792:	3b c0       	rjmp	.+118    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x5B: result = !kb_Shift ? ']' : '}'; break; 
 794:	cd e5       	ldi	r28, 0x5D	; 93
 796:	39 c0       	rjmp	.+114    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x4C: result = !kb_Shift ? ';' : ':'; break; 
 798:	cb e3       	ldi	r28, 0x3B	; 59
 79a:	37 c0       	rjmp	.+110    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x52: result = !kb_Shift ? '\'' : '\"'; break;
 79c:	c7 e2       	ldi	r28, 0x27	; 39
 79e:	35 c0       	rjmp	.+106    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x41: result = !kb_Shift ? ',' : '<'; break; 
 7a0:	cc e2       	ldi	r28, 0x2C	; 44
 7a2:	33 c0       	rjmp	.+102    	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x49: result = !kb_Shift ? '.' : '>'; break; 
 7a4:	ce e2       	ldi	r28, 0x2E	; 46
 7a6:	31 c0       	rjmp	.+98     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		case 0x4A: result = !kb_Shift ? '/' : '?'; break;
 7a8:	cf e2       	ldi	r28, 0x2F	; 47
 7aa:	2f c0       	rjmp	.+94     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
		
		case 0x7C: result = '*'; break;
		case 0x7B: result = '-'; break;
		case 0x79: result = '+'; break;
		case 0x71:
			if(kb_Extend) result = KB_DELETE;
 7ac:	c4 e8       	ldi	r28, 0x84	; 132
 7ae:	2d c0       	rjmp	.+90     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			else result = kb_NumLock ? '.' : 0x00;
 7b0:	ce e2       	ldi	r28, 0x2E	; 46
 7b2:	2b c0       	rjmp	.+86     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x70: 
			if(kb_Extend) result = KB_INSERT;
 7b4:	c3 e8       	ldi	r28, 0x83	; 131
 7b6:	29 c0       	rjmp	.+82     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			else result = kb_NumLock ? '0' : 0x00;
 7b8:	c0 e3       	ldi	r28, 0x30	; 48
 7ba:	27 c0       	rjmp	.+78     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x69:
			if(kb_Extend) result = KB_END;
 7bc:	c6 e8       	ldi	r28, 0x86	; 134
 7be:	25 c0       	rjmp	.+74     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			else result = kb_NumLock ? '1' : 0x00;
 7c0:	c1 e3       	ldi	r28, 0x31	; 49
 7c2:	23 c0       	rjmp	.+70     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x72:
			if(kb_Extend) result = KB_DOWN;
 7c4:	c2 e8       	ldi	r28, 0x82	; 130
 7c6:	21 c0       	rjmp	.+66     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			else result = kb_NumLock ? '2' : 0x00;
 7c8:	c2 e3       	ldi	r28, 0x32	; 50
 7ca:	1f c0       	rjmp	.+62     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x7A:
			if(kb_Extend) result = KB_PG_DN;
 7cc:	c8 e8       	ldi	r28, 0x88	; 136
 7ce:	1d c0       	rjmp	.+58     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			else result = kb_NumLock ? '3' : 0x00;
 7d0:	c3 e3       	ldi	r28, 0x33	; 51
 7d2:	1b c0       	rjmp	.+54     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x6B:
			if(kb_Extend) result = KB_LEFT;
 7d4:	c3 e8       	ldi	r28, 0x83	; 131
 7d6:	19 c0       	rjmp	.+50     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			else result = kb_NumLock ? '4' : 0x00;
 7d8:	c4 e3       	ldi	r28, 0x34	; 52
 7da:	17 c0       	rjmp	.+46     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x73:
			result = kb_NumLock ? '5' : 0x00;
 7dc:	c5 e3       	ldi	r28, 0x35	; 53
 7de:	15 c0       	rjmp	.+42     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x74:
			if(kb_Extend) result = KB_RIGHT;
 7e0:	c4 e8       	ldi	r28, 0x84	; 132
 7e2:	13 c0       	rjmp	.+38     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			else result = kb_NumLock ? '6' : 0x00;
 7e4:	c6 e3       	ldi	r28, 0x36	; 54
 7e6:	11 c0       	rjmp	.+34     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x6C:
			if(kb_Extend) result = KB_HOME;
 7e8:	c5 e8       	ldi	r28, 0x85	; 133
 7ea:	0f c0       	rjmp	.+30     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			else result = kb_NumLock ? '7' : 0x00;
 7ec:	c7 e3       	ldi	r28, 0x37	; 55
 7ee:	0d c0       	rjmp	.+26     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x75:
			if(kb_Extend) result = KB_UP;
 7f0:	c1 e8       	ldi	r28, 0x81	; 129
 7f2:	0b c0       	rjmp	.+22     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			else result = kb_NumLock ? '8' : 0x00;
 7f4:	c8 e3       	ldi	r28, 0x38	; 56
 7f6:	09 c0       	rjmp	.+18     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			break;
		case 0x7D:
			if(kb_Extend) result = KB_PG_UP;
 7f8:	c7 e8       	ldi	r28, 0x87	; 135
 7fa:	07 c0       	rjmp	.+14     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
			else result = kb_NumLock ? '9' : 0x00;
 7fc:	c9 e3       	ldi	r28, 0x39	; 57
 7fe:	05 c0       	rjmp	.+10     	; 0x80a <_ZN3PS27gerCharEv+0x3a0>
uint8_t PS2::gerChar(){
	uint8_t result;
	result = char_Received;
	switch(result){
		case 0x1C: result = 'a'; break;
		case 0x32: result = 'b'; break;
 800:	c2 e6       	ldi	r28, 0x62	; 98
 802:	96 cf       	rjmp	.-212    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
		case 0x21: result = 'c'; break;
		case 0x23: result = 'd'; break;
 804:	c4 e6       	ldi	r28, 0x64	; 100
 806:	94 cf       	rjmp	.-216    	; 0x730 <_ZN3PS27gerCharEv+0x2c6>
			result = 0x00;
			_delay_ms(500);
	}
	if ((result >= 'a')&&(result <= 'z')){
		if ((kb_Shift && !kb_Capslock) || (!kb_Shift && kb_Capslock)){
			result = result + ('A'-'a');
 808:	c0 52       	subi	r28, 0x20	; 32
		}
	}
	char_Received = 0;
 80a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <char_Received>
	return result;
}
 80e:	8c 2f       	mov	r24, r28
 810:	cf 91       	pop	r28
 812:	08 95       	ret

00000814 <__tablejump2__>:
 814:	ee 0f       	add	r30, r30
 816:	ff 1f       	adc	r31, r31
 818:	05 90       	lpm	r0, Z+
 81a:	f4 91       	lpm	r31, Z
 81c:	e0 2d       	mov	r30, r0
 81e:	09 94       	ijmp

00000820 <_exit>:
 820:	f8 94       	cli

00000822 <__stop_program>:
 822:	ff cf       	rjmp	.-2      	; 0x822 <__stop_program>
