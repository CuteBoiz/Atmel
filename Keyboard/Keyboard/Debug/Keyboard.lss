
KeyBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000162  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800068  00800068  000001fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000067e  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058a  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b5  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  0000117c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039e  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000197  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001789  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	5f c0       	rjmp	.+190    	; 0xc2 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e6       	ldi	r30, 0x62	; 98
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 36       	cpi	r26, 0x68	; 104
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e6       	ldi	r26, 0x68	; 104
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 36       	cpi	r26, 0x6B	; 107
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	2c d0       	rcall	.+88     	; 0xb2 <main>
  5a:	81 c0       	rjmp	.+258    	; 0x15e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z10USART_Initv>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

void USART_Init(){
	 UBRRH = 0;
  5e:	10 bc       	out	0x20, r1	; 32
	 UBRRL = 51;
  60:	83 e3       	ldi	r24, 0x33	; 51
  62:	89 b9       	out	0x09, r24	; 9
	 UCSRC |= (1<<URSEL)|(3<<UCSZ0);
  64:	80 b5       	in	r24, 0x20	; 32
  66:	86 68       	ori	r24, 0x86	; 134
  68:	80 bd       	out	0x20, r24	; 32
	 UCSRB |= (1<<TXEN);
  6a:	53 9a       	sbi	0x0a, 3	; 10
  6c:	08 95       	ret

0000006e <_Z14USART_Transmitc>:
}

void USART_Transmit(char data){
	while (!(UCSRA & (1<<UDRE)));
  6e:	5d 9b       	sbis	0x0b, 5	; 11
  70:	fe cf       	rjmp	.-4      	; 0x6e <_Z14USART_Transmitc>
	UDR = data;
  72:	8c b9       	out	0x0c, r24	; 12
  74:	08 95       	ret

00000076 <_Z16USART_SendStringPc>:
}

void USART_SendString(char *data){
  76:	cf 93       	push	r28
  78:	df 93       	push	r29
  7a:	ec 01       	movw	r28, r24
	register int i = 0;
	while (data[i]){
  7c:	88 81       	ld	r24, Y
  7e:	88 23       	and	r24, r24
  80:	29 f0       	breq	.+10     	; 0x8c <_Z16USART_SendStringPc+0x16>
  82:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(data[i]);
  84:	f4 df       	rcall	.-24     	; 0x6e <_Z14USART_Transmitc>
	UDR = data;
}

void USART_SendString(char *data){
	register int i = 0;
	while (data[i]){
  86:	89 91       	ld	r24, Y+
  88:	81 11       	cpse	r24, r1
  8a:	fc cf       	rjmp	.-8      	; 0x84 <_Z16USART_SendStringPc+0xe>
		USART_Transmit(data[i]);
		i++;
	}
}
  8c:	df 91       	pop	r29
  8e:	cf 91       	pop	r28
  90:	08 95       	ret

00000092 <_Z9INT0_Initv>:

void INT0_Init(){
	MCUCR |= (1<<ISC01);
  92:	85 b7       	in	r24, 0x35	; 53
  94:	82 60       	ori	r24, 0x02	; 2
  96:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
  98:	8b b7       	in	r24, 0x3b	; 59
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	8b bf       	out	0x3b, r24	; 59
  9e:	08 95       	ret

000000a0 <_Z7kb_Initv>:
volatile uint8_t	count;
uint8_t				currentChar; //Hex code every pressed
volatile uint8_t	charReceived; //A char received

void kb_Init(){
	DDRD &= ~((1<<3));
  a0:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1<<3);
  a2:	93 9a       	sbi	0x12, 3	; 18
	count = 0;
  a4:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <count>
	currentChar = 0;
  a8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <currentChar>
	charReceived = 0;
  ac:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
  b0:	08 95       	ret

000000b2 <main>:
}

int main(void){
	USART_Init();
  b2:	d5 df       	rcall	.-86     	; 0x5e <_Z10USART_Initv>
	INT0_Init();
  b4:	ee df       	rcall	.-36     	; 0x92 <_Z9INT0_Initv>
	kb_Init();
  b6:	f4 df       	rcall	.-24     	; 0xa0 <_Z7kb_Initv>
	USART_SendString("Begin!\n");
  b8:	80 e6       	ldi	r24, 0x60	; 96
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	dc df       	rcall	.-72     	; 0x76 <_Z16USART_SendStringPc>
	sei();
  be:	78 94       	sei
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0xe>

000000c2 <__vector_1>:
	{
		
	}
}

ISR(INT0_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	 //Get Data bit
	 register uint8_t value;
	 if (PIND & (1<<3)){
  e4:	80 b3       	in	r24, 0x10	; 16
  e6:	83 fb       	bst	r24, 3
  e8:	88 27       	eor	r24, r24
  ea:	80 f9       	bld	r24, 0
	 }
	 else{
		 value = 0x00;
	 }
	 //Add to complete byte
	 if (count > 0 && count < 9){
  ec:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <count>
  f0:	99 23       	and	r25, r25
  f2:	21 f0       	breq	.+8      	; 0xfc <__vector_1+0x3a>
  f4:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <count>
  f8:	99 30       	cpi	r25, 0x09	; 9
  fa:	88 f0       	brcs	.+34     	; 0x11e <__vector_1+0x5c>
		 currentChar |= (value << (count - 1));
	 }
	 count ++;
  fc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <count>
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <count>
	 if (count == 11){
 106:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <count>
 10a:	8b 30       	cpi	r24, 0x0B	; 11
 10c:	b9 f4       	brne	.+46     	; 0x13c <__vector_1+0x7a>
		 USART_Transmit(currentChar);
 10e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <currentChar>
 112:	ad df       	rcall	.-166    	; 0x6e <_Z14USART_Transmitc>
		 currentChar = 0;
 114:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <currentChar>
		 count  = 0;
 118:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <count>
	 }
	 
 11c:	0f c0       	rjmp	.+30     	; 0x13c <__vector_1+0x7a>
	 else{
		 value = 0x00;
	 }
	 //Add to complete byte
	 if (count > 0 && count < 9){
		 currentChar |= (value << (count - 1));
 11e:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <count>
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	21 50       	subi	r18, 0x01	; 1
 126:	02 c0       	rjmp	.+4      	; 0x12c <__vector_1+0x6a>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	2a 95       	dec	r18
 12e:	e2 f7       	brpl	.-8      	; 0x128 <__vector_1+0x66>
 130:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <currentChar>
 134:	89 2b       	or	r24, r25
 136:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <currentChar>
 13a:	e0 cf       	rjmp	.-64     	; 0xfc <__vector_1+0x3a>
		 USART_Transmit(currentChar);
		 currentChar = 0;
		 count  = 0;
	 }
	 
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
