
Roll-Call System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000101a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000268  00800060  0000101a  000010ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  008002c8  008002c8  00001316  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023f0  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be0  00000000  00000000  000038b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fab  00000000  00000000  00004494  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  00005440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008cb  00000000  00000000  000057c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013b7  00000000  00000000  00006093  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000744a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c0       	rjmp	.+266    	; 0x10c <__ctors_end>
       2:	0d c7       	rjmp	.+3610   	; 0xe1e <__vector_1>
       4:	a8 c0       	rjmp	.+336    	; 0x156 <__bad_interrupt>
       6:	a7 c0       	rjmp	.+334    	; 0x156 <__bad_interrupt>
       8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
       a:	a5 c0       	rjmp	.+330    	; 0x156 <__bad_interrupt>
       c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
       e:	a3 c0       	rjmp	.+326    	; 0x156 <__bad_interrupt>
      10:	a2 c0       	rjmp	.+324    	; 0x156 <__bad_interrupt>
      12:	a1 c0       	rjmp	.+322    	; 0x156 <__bad_interrupt>
      14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
      16:	9f c0       	rjmp	.+318    	; 0x156 <__bad_interrupt>
      18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
      1a:	9d c0       	rjmp	.+314    	; 0x156 <__bad_interrupt>
      1c:	9c c0       	rjmp	.+312    	; 0x156 <__bad_interrupt>
      1e:	9b c0       	rjmp	.+310    	; 0x156 <__bad_interrupt>
      20:	9a c0       	rjmp	.+308    	; 0x156 <__bad_interrupt>
      22:	99 c0       	rjmp	.+306    	; 0x156 <__bad_interrupt>
      24:	98 c0       	rjmp	.+304    	; 0x156 <__bad_interrupt>
      26:	9a c6       	rjmp	.+3380   	; 0xd5c <_ZN3PS27getCharEv+0x2f6>
      28:	98 c5       	rjmp	.+2864   	; 0xb5a <_ZN3PS27getCharEv+0xf4>
      2a:	7a c6       	rjmp	.+3316   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      2c:	79 c6       	rjmp	.+3314   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      2e:	78 c6       	rjmp	.+3312   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      30:	77 c6       	rjmp	.+3310   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      32:	76 c6       	rjmp	.+3308   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      34:	75 c6       	rjmp	.+3306   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      36:	42 c5       	rjmp	.+2692   	; 0xabc <_ZN3PS27getCharEv+0x56>
      38:	5b c5       	rjmp	.+2742   	; 0xaf0 <_ZN3PS27getCharEv+0x8a>
      3a:	72 c6       	rjmp	.+3300   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      3c:	71 c6       	rjmp	.+3298   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      3e:	70 c6       	rjmp	.+3296   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      40:	4f c5       	rjmp	.+2718   	; 0xae0 <_ZN3PS27getCharEv+0x7a>
      42:	40 c5       	rjmp	.+2688   	; 0xac4 <_ZN3PS27getCharEv+0x5e>
      44:	78 c6       	rjmp	.+3312   	; 0xd36 <_ZN3PS27getCharEv+0x2d0>
      46:	46 c5       	rjmp	.+2700   	; 0xad4 <_ZN3PS27getCharEv+0x6e>
      48:	59 c5       	rjmp	.+2738   	; 0xafc <_ZN3PS27getCharEv+0x96>
      4a:	6a c6       	rjmp	.+3284   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      4c:	69 c6       	rjmp	.+3282   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      4e:	1c c5       	rjmp	.+2616   	; 0xa88 <_ZN3PS27getCharEv+0x22>
      50:	43 c5       	rjmp	.+2694   	; 0xad8 <_ZN3PS27getCharEv+0x72>
      52:	de c6       	rjmp	.+3516   	; 0xe10 <_ZN3PS27getCharEv+0x3aa>
      54:	1b c5       	rjmp	.+2614   	; 0xa8c <_ZN3PS27getCharEv+0x26>
      56:	5e c5       	rjmp	.+2748   	; 0xb14 <_ZN3PS27getCharEv+0xae>
      58:	57 c5       	rjmp	.+2734   	; 0xb08 <_ZN3PS27getCharEv+0xa2>
      5a:	62 c6       	rjmp	.+3268   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      5c:	61 c6       	rjmp	.+3266   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      5e:	80 c6       	rjmp	.+3328   	; 0xd60 <_ZN3PS27getCharEv+0x2fa>
      60:	37 c5       	rjmp	.+2670   	; 0xad0 <_ZN3PS27getCharEv+0x6a>
      62:	16 c5       	rjmp	.+2604   	; 0xa90 <_ZN3PS27getCharEv+0x2a>
      64:	31 c5       	rjmp	.+2658   	; 0xac8 <_ZN3PS27getCharEv+0x62>
      66:	2c c5       	rjmp	.+2648   	; 0xac0 <_ZN3PS27getCharEv+0x5a>
      68:	5b c5       	rjmp	.+2742   	; 0xb20 <_ZN3PS27getCharEv+0xba>
      6a:	5a c6       	rjmp	.+3252   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      6c:	59 c6       	rjmp	.+3250   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      6e:	20 c5       	rjmp	.+2624   	; 0xab0 <_ZN3PS27getCharEv+0x4a>
      70:	cd c6       	rjmp	.+3482   	; 0xe0c <_ZN3PS27getCharEv+0x3a6>
      72:	12 c5       	rjmp	.+2596   	; 0xa98 <_ZN3PS27getCharEv+0x32>
      74:	0f c5       	rjmp	.+2590   	; 0xa94 <_ZN3PS27getCharEv+0x2e>
      76:	32 c5       	rjmp	.+2660   	; 0xadc <_ZN3PS27getCharEv+0x76>
      78:	59 c5       	rjmp	.+2738   	; 0xb2c <_ZN3PS27getCharEv+0xc6>
      7a:	52 c6       	rjmp	.+3236   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      7c:	51 c6       	rjmp	.+3234   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      7e:	50 c6       	rjmp	.+3232   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      80:	15 c5       	rjmp	.+2602   	; 0xaac <_ZN3PS27getCharEv+0x46>
      82:	0e c5       	rjmp	.+2588   	; 0xaa0 <_ZN3PS27getCharEv+0x3a>
      84:	23 c5       	rjmp	.+2630   	; 0xacc <_ZN3PS27getCharEv+0x66>
      86:	57 c5       	rjmp	.+2734   	; 0xb36 <_ZN3PS27getCharEv+0xd0>
      88:	5c c5       	rjmp	.+2744   	; 0xb42 <_ZN3PS27getCharEv+0xdc>
      8a:	4a c6       	rjmp	.+3220   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      8c:	49 c6       	rjmp	.+3218   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      8e:	95 c5       	rjmp	.+2858   	; 0xbba <_ZN3PS27getCharEv+0x154>
      90:	09 c5       	rjmp	.+2578   	; 0xaa4 <_ZN3PS27getCharEv+0x3e>
      92:	04 c5       	rjmp	.+2568   	; 0xa9c <_ZN3PS27getCharEv+0x36>
      94:	0f c5       	rjmp	.+2590   	; 0xab4 <_ZN3PS27getCharEv+0x4e>
      96:	26 c5       	rjmp	.+2636   	; 0xae4 <_ZN3PS27getCharEv+0x7e>
      98:	5a c5       	rjmp	.+2740   	; 0xb4e <_ZN3PS27getCharEv+0xe8>
      9a:	42 c6       	rjmp	.+3204   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      9c:	41 c6       	rjmp	.+3202   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      9e:	93 c5       	rjmp	.+2854   	; 0xbc6 <_ZN3PS27getCharEv+0x160>
      a0:	98 c5       	rjmp	.+2864   	; 0xbd2 <_ZN3PS27getCharEv+0x16c>
      a2:	02 c5       	rjmp	.+2564   	; 0xaa8 <_ZN3PS27getCharEv+0x42>
      a4:	7e c5       	rjmp	.+2812   	; 0xba2 <_ZN3PS27getCharEv+0x13c>
      a6:	08 c5       	rjmp	.+2576   	; 0xab8 <_ZN3PS27getCharEv+0x52>
      a8:	5e c5       	rjmp	.+2748   	; 0xb66 <_ZN3PS27getCharEv+0x100>
      aa:	3a c6       	rjmp	.+3188   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      ac:	39 c6       	rjmp	.+3186   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      ae:	38 c6       	rjmp	.+3184   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      b0:	7e c5       	rjmp	.+2812   	; 0xbae <_ZN3PS27getCharEv+0x148>
      b2:	36 c6       	rjmp	.+3180   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      b4:	6a c5       	rjmp	.+2772   	; 0xb8a <_ZN3PS27getCharEv+0x124>
      b6:	5d c5       	rjmp	.+2746   	; 0xb72 <_ZN3PS27getCharEv+0x10c>
      b8:	33 c6       	rjmp	.+3174   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      ba:	32 c6       	rjmp	.+3172   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      bc:	94 c5       	rjmp	.+2856   	; 0xbe6 <_ZN3PS27getCharEv+0x180>
      be:	30 c6       	rjmp	.+3168   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      c0:	e1 c4       	rjmp	.+2498   	; 0xa84 <_ZN3PS27getCharEv+0x1e>
      c2:	69 c5       	rjmp	.+2770   	; 0xb96 <_ZN3PS27getCharEv+0x130>
      c4:	2d c6       	rjmp	.+3162   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      c6:	5b c5       	rjmp	.+2742   	; 0xb7e <_ZN3PS27getCharEv+0x118>
      c8:	2b c6       	rjmp	.+3158   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      ca:	2a c6       	rjmp	.+3156   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      cc:	29 c6       	rjmp	.+3154   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      ce:	28 c6       	rjmp	.+3152   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      d0:	27 c6       	rjmp	.+3150   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      d2:	26 c6       	rjmp	.+3148   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      d4:	25 c6       	rjmp	.+3146   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      d6:	24 c6       	rjmp	.+3144   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      d8:	82 c5       	rjmp	.+2820   	; 0xbde <_ZN3PS27getCharEv+0x178>
      da:	22 c6       	rjmp	.+3140   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      dc:	21 c6       	rjmp	.+3138   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      de:	ca c5       	rjmp	.+2964   	; 0xc74 <_ZN3PS27getCharEv+0x20e>
      e0:	1f c6       	rjmp	.+3134   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      e2:	e6 c5       	rjmp	.+3020   	; 0xcb0 <_ZN3PS27getCharEv+0x24a>
      e4:	ff c5       	rjmp	.+3070   	; 0xce4 <_ZN3PS27getCharEv+0x27e>
      e6:	1c c6       	rjmp	.+3128   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      e8:	1b c6       	rjmp	.+3126   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      ea:	1a c6       	rjmp	.+3124   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      ec:	b9 c5       	rjmp	.+2930   	; 0xc60 <_ZN3PS27getCharEv+0x1fa>
      ee:	ae c5       	rjmp	.+2908   	; 0xc4c <_ZN3PS27getCharEv+0x1e6>
      f0:	cb c5       	rjmp	.+2966   	; 0xc88 <_ZN3PS27getCharEv+0x222>
      f2:	e8 c5       	rjmp	.+3024   	; 0xcc4 <_ZN3PS27getCharEv+0x25e>
      f4:	ed c5       	rjmp	.+3034   	; 0xcd0 <_ZN3PS27getCharEv+0x26a>
      f6:	00 c6       	rjmp	.+3072   	; 0xcf8 <_ZN3PS27getCharEv+0x292>
      f8:	74 c5       	rjmp	.+2792   	; 0xbe2 <_ZN3PS27getCharEv+0x17c>
      fa:	84 c5       	rjmp	.+2824   	; 0xc04 <_ZN3PS27getCharEv+0x19e>
      fc:	11 c6       	rjmp	.+3106   	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
      fe:	a4 c5       	rjmp	.+2888   	; 0xc48 <_ZN3PS27getCharEv+0x1e2>
     100:	cd c5       	rjmp	.+2970   	; 0xc9c <_ZN3PS27getCharEv+0x236>
     102:	a0 c5       	rjmp	.+2880   	; 0xc44 <_ZN3PS27getCharEv+0x1de>
     104:	9d c5       	rjmp	.+2874   	; 0xc40 <_ZN3PS27getCharEv+0x1da>
     106:	02 c6       	rjmp	.+3076   	; 0xd0c <_ZN3PS27getCharEv+0x2a6>
     108:	8c c5       	rjmp	.+2840   	; 0xc22 <_ZN3PS27getCharEv+0x1bc>

0000010a <__ctors_start>:
     10a:	bf 01       	movw	r22, r30

0000010c <__ctors_end>:
     10c:	11 24       	eor	r1, r1
     10e:	1f be       	out	0x3f, r1	; 63
     110:	cf e5       	ldi	r28, 0x5F	; 95
     112:	d4 e0       	ldi	r29, 0x04	; 4
     114:	de bf       	out	0x3e, r29	; 62
     116:	cd bf       	out	0x3d, r28	; 61

00000118 <__do_copy_data>:
     118:	12 e0       	ldi	r17, 0x02	; 2
     11a:	a0 e6       	ldi	r26, 0x60	; 96
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	ea e1       	ldi	r30, 0x1A	; 26
     120:	f0 e1       	ldi	r31, 0x10	; 16
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x10>
     124:	05 90       	lpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	a8 3c       	cpi	r26, 0xC8	; 200
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0xc>

0000012e <__do_clear_bss>:
     12e:	22 e0       	ldi	r18, 0x02	; 2
     130:	a8 ec       	ldi	r26, 0xC8	; 200
     132:	b2 e0       	ldi	r27, 0x02	; 2
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	ab 3e       	cpi	r26, 0xEB	; 235
     13a:	b2 07       	cpc	r27, r18
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>

0000013e <__do_global_ctors>:
     13e:	10 e0       	ldi	r17, 0x00	; 0
     140:	c6 e8       	ldi	r28, 0x86	; 134
     142:	d0 e0       	ldi	r29, 0x00	; 0
     144:	03 c0       	rjmp	.+6      	; 0x14c <__do_global_ctors+0xe>
     146:	21 97       	sbiw	r28, 0x01	; 1
     148:	fe 01       	movw	r30, r28
     14a:	5f d7       	rcall	.+3774   	; 0x100a <__tablejump2__>
     14c:	c5 38       	cpi	r28, 0x85	; 133
     14e:	d1 07       	cpc	r29, r17
     150:	d1 f7       	brne	.-12     	; 0x146 <__do_global_ctors+0x8>
     152:	cd d0       	rcall	.+410    	; 0x2ee <main>
     154:	60 c7       	rjmp	.+3776   	; 0x1016 <_exit>

00000156 <__bad_interrupt>:
     156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <_Z10USART_Initv>:
		}
    }
}

void USART_Init(){
	UBRRH = 0;
     158:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
     15a:	83 e3       	ldi	r24, 0x33	; 51
     15c:	89 b9       	out	0x09, r24	; 9
	UCSRC |= (1<<URSEL)|(3<<UCSZ0);
     15e:	80 b5       	in	r24, 0x20	; 32
     160:	86 68       	ori	r24, 0x86	; 134
     162:	80 bd       	out	0x20, r24	; 32
	UCSRB |= (1<<TXEN);
     164:	53 9a       	sbi	0x0a, 3	; 10
     166:	08 95       	ret

00000168 <_Z14USART_Transmitc>:
}
	
void USART_Transmit(char data){
	while(!(UCSRA & (1<<UDRE)));
     168:	5d 9b       	sbis	0x0b, 5	; 11
     16a:	fe cf       	rjmp	.-4      	; 0x168 <_Z14USART_Transmitc>
	UDR = data;
     16c:	8c b9       	out	0x0c, r24	; 12
     16e:	08 95       	ret

00000170 <_Z16USART_SendStringPc>:
}

void USART_SendString(char *data){
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	ec 01       	movw	r28, r24
	register int i = 0;
	while(data[i]){
     176:	88 81       	ld	r24, Y
     178:	88 23       	and	r24, r24
     17a:	29 f0       	breq	.+10     	; 0x186 <_Z16USART_SendStringPc+0x16>
     17c:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(data[i]);
     17e:	f4 df       	rcall	.-24     	; 0x168 <_Z14USART_Transmitc>
	UDR = data;
}

void USART_SendString(char *data){
	register int i = 0;
	while(data[i]){
     180:	89 91       	ld	r24, Y+
     182:	81 11       	cpse	r24, r1
     184:	fc cf       	rjmp	.-8      	; 0x17e <_Z16USART_SendStringPc+0xe>
		USART_Transmit(data[i]);
		i++;
	}
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <_Z8PrevMenuv>:
			case 2: PrevMenu(); break;
		}
	}
}

void PrevMenu(){
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
	char *name  = LCD.getTitle();
     194:	89 ec       	ldi	r24, 0xC9	; 201
     196:	92 e0       	ldi	r25, 0x02	; 2
     198:	b3 d3       	rcall	.+1894   	; 0x900 <_ZN7PCD85448getTitleEv>
	if (name == "RFID"){
     19a:	20 e0       	ldi	r18, 0x00	; 0
     19c:	86 3d       	cpi	r24, 0xD6	; 214
     19e:	92 07       	cpc	r25, r18
     1a0:	91 f4       	brne	.+36     	; 0x1c6 <_Z8PrevMenuv+0x3a>
		LCD.createMenu(0, 0, 2, "My System", mySystem);
     1a2:	0f 2e       	mov	r0, r31
     1a4:	f2 e7       	ldi	r31, 0x72	; 114
     1a6:	ef 2e       	mov	r14, r31
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	ff 2e       	mov	r15, r31
     1ac:	f0 2d       	mov	r31, r0
     1ae:	06 e7       	ldi	r16, 0x76	; 118
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	22 e0       	ldi	r18, 0x02	; 2
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	40 e0       	ldi	r20, 0x00	; 0
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	89 ec       	ldi	r24, 0xC9	; 201
     1c0:	92 e0       	ldi	r25, 0x02	; 2
     1c2:	e2 d2       	rcall	.+1476   	; 0x788 <_ZN7PCD854410createMenuEiiiPcPS0_>
     1c4:	2a c0       	rjmp	.+84     	; 0x21a <_Z8PrevMenuv+0x8e>
	}
	else if (name == "Setting"){
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	8d 3d       	cpi	r24, 0xDD	; 221
     1ca:	92 07       	cpc	r25, r18
     1cc:	91 f4       	brne	.+36     	; 0x1f2 <_Z8PrevMenuv+0x66>
		LCD.createMenu(1, 0, 2, "My System", mySystem);
     1ce:	0f 2e       	mov	r0, r31
     1d0:	f2 e7       	ldi	r31, 0x72	; 114
     1d2:	ef 2e       	mov	r14, r31
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	ff 2e       	mov	r15, r31
     1d8:	f0 2d       	mov	r31, r0
     1da:	06 e7       	ldi	r16, 0x76	; 118
     1dc:	10 e0       	ldi	r17, 0x00	; 0
     1de:	22 e0       	ldi	r18, 0x02	; 2
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	89 ec       	ldi	r24, 0xC9	; 201
     1ec:	92 e0       	ldi	r25, 0x02	; 2
     1ee:	cc d2       	rcall	.+1432   	; 0x788 <_ZN7PCD854410createMenuEiiiPcPS0_>
     1f0:	14 c0       	rjmp	.+40     	; 0x21a <_Z8PrevMenuv+0x8e>
	}
	else if (name == "List"){
     1f2:	81 5c       	subi	r24, 0xC1	; 193
     1f4:	90 40       	sbci	r25, 0x00	; 0
     1f6:	89 f4       	brne	.+34     	; 0x21a <_Z8PrevMenuv+0x8e>
		LCD.createMenu(0, 0, 2, "RFID", RFID);
     1f8:	0f 2e       	mov	r0, r31
     1fa:	fc e6       	ldi	r31, 0x6C	; 108
     1fc:	ef 2e       	mov	r14, r31
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	ff 2e       	mov	r15, r31
     202:	f0 2d       	mov	r31, r0
     204:	06 ed       	ldi	r16, 0xD6	; 214
     206:	10 e0       	ldi	r17, 0x00	; 0
     208:	22 e0       	ldi	r18, 0x02	; 2
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e0       	ldi	r20, 0x00	; 0
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	89 ec       	ldi	r24, 0xC9	; 201
     216:	92 e0       	ldi	r25, 0x02	; 2
     218:	b7 d2       	rcall	.+1390   	; 0x788 <_ZN7PCD854410createMenuEiiiPcPS0_>
	}
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	08 95       	ret

00000224 <_Z8NextMenuv>:
		USART_Transmit(data[i]);
		i++;
	}
}

void NextMenu(){
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
	char *name  = LCD.getTitle();
     22c:	89 ec       	ldi	r24, 0xC9	; 201
     22e:	92 e0       	ldi	r25, 0x02	; 2
     230:	67 d3       	rcall	.+1742   	; 0x900 <_ZN7PCD85448getTitleEv>
	if (name == "My System"){
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	86 37       	cpi	r24, 0x76	; 118
     236:	92 07       	cpc	r25, r18
     238:	61 f5       	brne	.+88     	; 0x292 <_Z8NextMenuv+0x6e>
		switch (LCD.getPointer()){
     23a:	89 ec       	ldi	r24, 0xC9	; 201
     23c:	92 e0       	ldi	r25, 0x02	; 2
     23e:	5c d3       	rcall	.+1720   	; 0x8f8 <_ZN7PCD854410getPointerEv>
     240:	00 97       	sbiw	r24, 0x00	; 0
     242:	19 f0       	breq	.+6      	; 0x24a <_Z8NextMenuv+0x26>
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	99 f0       	breq	.+38     	; 0x26e <_Z8NextMenuv+0x4a>
     248:	4d c0       	rjmp	.+154    	; 0x2e4 <_Z8NextMenuv+0xc0>
			case 0: LCD.createMenu(0, 0, 5,"RFID", RFID); break;
     24a:	0f 2e       	mov	r0, r31
     24c:	fc e6       	ldi	r31, 0x6C	; 108
     24e:	ef 2e       	mov	r14, r31
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ff 2e       	mov	r15, r31
     254:	f0 2d       	mov	r31, r0
     256:	06 ed       	ldi	r16, 0xD6	; 214
     258:	10 e0       	ldi	r17, 0x00	; 0
     25a:	25 e0       	ldi	r18, 0x05	; 5
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	89 ec       	ldi	r24, 0xC9	; 201
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	8e d2       	rcall	.+1308   	; 0x788 <_ZN7PCD854410createMenuEiiiPcPS0_>
     26c:	3b c0       	rjmp	.+118    	; 0x2e4 <_Z8NextMenuv+0xc0>
			case 1: LCD.createMenu(0, 0, 3, "Setting", Setting); break;
     26e:	0f 2e       	mov	r0, r31
     270:	f6 e6       	ldi	r31, 0x66	; 102
     272:	ef 2e       	mov	r14, r31
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	ff 2e       	mov	r15, r31
     278:	f0 2d       	mov	r31, r0
     27a:	0d ed       	ldi	r16, 0xDD	; 221
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	23 e0       	ldi	r18, 0x03	; 3
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	40 e0       	ldi	r20, 0x00	; 0
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	89 ec       	ldi	r24, 0xC9	; 201
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	7c d2       	rcall	.+1272   	; 0x788 <_ZN7PCD854410createMenuEiiiPcPS0_>
     290:	29 c0       	rjmp	.+82     	; 0x2e4 <_Z8NextMenuv+0xc0>
		}
	}
	else if (name == "RFID"){
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	86 3d       	cpi	r24, 0xD6	; 214
     296:	92 07       	cpc	r25, r18
     298:	e1 f4       	brne	.+56     	; 0x2d2 <_Z8NextMenuv+0xae>
		switch (LCD.getPointer()){
     29a:	89 ec       	ldi	r24, 0xC9	; 201
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	2c d3       	rcall	.+1624   	; 0x8f8 <_ZN7PCD854410getPointerEv>
     2a0:	00 97       	sbiw	r24, 0x00	; 0
     2a2:	19 f0       	breq	.+6      	; 0x2aa <_Z8NextMenuv+0x86>
     2a4:	04 97       	sbiw	r24, 0x04	; 4
     2a6:	99 f0       	breq	.+38     	; 0x2ce <_Z8NextMenuv+0xaa>
     2a8:	1d c0       	rjmp	.+58     	; 0x2e4 <_Z8NextMenuv+0xc0>
			case 0: LCD.createMenu(0, 0, 3, "List", List); break;
     2aa:	0f 2e       	mov	r0, r31
     2ac:	f0 e6       	ldi	r31, 0x60	; 96
     2ae:	ef 2e       	mov	r14, r31
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	ff 2e       	mov	r15, r31
     2b4:	f0 2d       	mov	r31, r0
     2b6:	01 ec       	ldi	r16, 0xC1	; 193
     2b8:	10 e0       	ldi	r17, 0x00	; 0
     2ba:	23 e0       	ldi	r18, 0x03	; 3
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	89 ec       	ldi	r24, 0xC9	; 201
     2c8:	92 e0       	ldi	r25, 0x02	; 2
     2ca:	5e d2       	rcall	.+1212   	; 0x788 <_ZN7PCD854410createMenuEiiiPcPS0_>
     2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <_Z8NextMenuv+0xc0>
			case 1: break;
			case 2: break;
			case 3: break;
			case 4: PrevMenu(); break;
     2ce:	5e df       	rcall	.-324    	; 0x18c <_Z8PrevMenuv>
     2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <_Z8NextMenuv+0xc0>
		}
	}
	else if (name == "Setting"){
     2d2:	8d 5d       	subi	r24, 0xDD	; 221
     2d4:	90 40       	sbci	r25, 0x00	; 0
     2d6:	31 f4       	brne	.+12     	; 0x2e4 <_Z8NextMenuv+0xc0>
		switch(LCD.getPointer()){
     2d8:	89 ec       	ldi	r24, 0xC9	; 201
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	0d d3       	rcall	.+1562   	; 0x8f8 <_ZN7PCD854410getPointerEv>
     2de:	02 97       	sbiw	r24, 0x02	; 2
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <_Z8NextMenuv+0xc0>
			case 0: break;
			case 1: break;
			case 2: PrevMenu(); break;
     2e2:	54 df       	rcall	.-344    	; 0x18c <_Z8PrevMenuv>
		}
	}
}
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	08 95       	ret

000002ee <main>:

PS2 kb;

int main(void)
{
	DDRC |= (1<<5);
     2ee:	a5 9a       	sbi	0x14, 5	; 20
	USART_Init();
     2f0:	33 df       	rcall	.-410    	; 0x158 <_Z10USART_Initv>
	USART_SendString("Begin!\n");
     2f2:	80 e8       	ldi	r24, 0x80	; 128
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	3c df       	rcall	.-392    	; 0x170 <_Z16USART_SendStringPc>
	
	kb.begin();
     2f8:	88 ec       	ldi	r24, 0xC8	; 200
     2fa:	92 e0       	ldi	r25, 0x02	; 2
     2fc:	77 d3       	rcall	.+1774   	; 0x9ec <_ZN3PS25beginEv>
	sei();
     2fe:	78 94       	sei
	
    LCD.begin();
     300:	89 ec       	ldi	r24, 0xC9	; 201
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	95 d1       	rcall	.+810    	; 0x630 <_ZN7PCD85445beginEv>
	LCD.createMenu(0, 0, 2, "My System", mySystem);	
     306:	0f 2e       	mov	r0, r31
     308:	f2 e7       	ldi	r31, 0x72	; 114
     30a:	ef 2e       	mov	r14, r31
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	ff 2e       	mov	r15, r31
     310:	f0 2d       	mov	r31, r0
     312:	06 e7       	ldi	r16, 0x76	; 118
     314:	10 e0       	ldi	r17, 0x00	; 0
     316:	22 e0       	ldi	r18, 0x02	; 2
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	89 ec       	ldi	r24, 0xC9	; 201
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	30 d2       	rcall	.+1120   	; 0x788 <_ZN7PCD854410createMenuEiiiPcPS0_>
	LCD.displayMenu();
     328:	89 ec       	ldi	r24, 0xC9	; 201
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	57 d2       	rcall	.+1198   	; 0x7dc <_ZN7PCD854411displayMenuEv>
    while (1) 
    {
		if (kb.available()){
     32e:	88 ec       	ldi	r24, 0xC8	; 200
     330:	92 e0       	ldi	r25, 0x02	; 2
     332:	92 d3       	rcall	.+1828   	; 0xa58 <_ZN3PS29availableEv>
     334:	88 23       	and	r24, r24
     336:	d9 f3       	breq	.-10     	; 0x32e <main+0x40>
			uint8_t key = kb.getChar();
     338:	88 ec       	ldi	r24, 0xC8	; 200
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	94 d3       	rcall	.+1832   	; 0xa66 <_ZN3PS27getCharEv>
     33e:	c8 2f       	mov	r28, r24
			USART_Transmit(key);
     340:	13 df       	rcall	.-474    	; 0x168 <_Z14USART_Transmitc>
			if (key == KB_UP){
     342:	c1 38       	cpi	r28, 0x81	; 129
     344:	21 f4       	brne	.+8      	; 0x34e <main+0x60>
				LCD.decreasePointer();
     346:	89 ec       	ldi	r24, 0xC9	; 201
     348:	92 e0       	ldi	r25, 0x02	; 2
     34a:	fa d2       	rcall	.+1524   	; 0x940 <_ZN7PCD854415decreasePointerEv>
     34c:	11 c0       	rjmp	.+34     	; 0x370 <main+0x82>
			}
			else if (key == KB_DOWN){
     34e:	c2 38       	cpi	r28, 0x82	; 130
     350:	21 f4       	brne	.+8      	; 0x35a <main+0x6c>
				LCD.increasePointer();	
     352:	89 ec       	ldi	r24, 0xC9	; 201
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	d8 d2       	rcall	.+1456   	; 0x908 <_ZN7PCD854415increasePointerEv>
     358:	0b c0       	rjmp	.+22     	; 0x370 <main+0x82>
			}
			else if ((key == '\n') || (key == KB_RIGHT)){
     35a:	ca 30       	cpi	r28, 0x0A	; 10
     35c:	11 f0       	breq	.+4      	; 0x362 <main+0x74>
     35e:	c4 38       	cpi	r28, 0x84	; 132
     360:	11 f4       	brne	.+4      	; 0x366 <main+0x78>
				NextMenu();
     362:	60 df       	rcall	.-320    	; 0x224 <_Z8NextMenuv>
     364:	05 c0       	rjmp	.+10     	; 0x370 <main+0x82>
			}
			else if ((key == KB_ESC) || (key == KB_LEFT)){
     366:	c9 38       	cpi	r28, 0x89	; 137
     368:	11 f0       	breq	.+4      	; 0x36e <main+0x80>
     36a:	c3 38       	cpi	r28, 0x83	; 131
     36c:	09 f4       	brne	.+2      	; 0x370 <main+0x82>
				PrevMenu();
     36e:	0e df       	rcall	.-484    	; 0x18c <_Z8PrevMenuv>
			}
			else{}
			LCD.clearSreen();
     370:	89 ec       	ldi	r24, 0xC9	; 201
     372:	92 e0       	ldi	r25, 0x02	; 2
     374:	49 d1       	rcall	.+658    	; 0x608 <_ZN7PCD854410clearSreenEv>
			LCD.displayMenu();
     376:	89 ec       	ldi	r24, 0xC9	; 201
     378:	92 e0       	ldi	r25, 0x02	; 2
     37a:	30 d2       	rcall	.+1120   	; 0x7dc <_ZN7PCD854411displayMenuEv>
     37c:	d8 cf       	rjmp	.-80     	; 0x32e <main+0x40>

0000037e <_GLOBAL__sub_I_mySystem>:
		LCD.createMenu(1, 0, 2, "My System", mySystem);
	}
	else if (name == "List"){
		LCD.createMenu(0, 0, 2, "RFID", RFID);
	}
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
void USART_SendString(char *data);

void NextMenu();
void PrevMenu();

PCD8544 LCD(7, 3, 2, 1 ,0);
     386:	e1 2c       	mov	r14, r1
     388:	f1 2c       	mov	r15, r1
     38a:	01 e0       	ldi	r16, 0x01	; 1
     38c:	10 e0       	ldi	r17, 0x00	; 0
     38e:	22 e0       	ldi	r18, 0x02	; 2
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	43 e0       	ldi	r20, 0x03	; 3
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	67 e0       	ldi	r22, 0x07	; 7
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	89 ec       	ldi	r24, 0xC9	; 201
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	08 d0       	rcall	.+16     	; 0x3b0 <_ZN7PCD8544C1Eiiiii>

PS2 kb;
     3a0:	88 ec       	ldi	r24, 0xC8	; 200
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	e6 d2       	rcall	.+1484   	; 0x972 <_ZN3PS2C1Ev>
		LCD.createMenu(1, 0, 2, "My System", mySystem);
	}
	else if (name == "List"){
		LCD.createMenu(0, 0, 2, "RFID", RFID);
	}
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	08 95       	ret

000003b0 <_ZN7PCD8544C1Eiiiii>:
 *  Author: tanph
 */ 

#include "Nokia5110.h"

PCD8544::PCD8544(int RST, int SCE, int DC, int SDIN, int SCLK){
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	fc 01       	movw	r30, r24
	RST_PIN = RST;
     3ba:	60 83       	st	Z, r22
     3bc:	71 83       	std	Z+1, r23	; 0x01
	SCE_PIN = SCE;
     3be:	53 83       	std	Z+3, r21	; 0x03
     3c0:	42 83       	std	Z+2, r20	; 0x02
	DC_PIN = DC;
     3c2:	35 83       	std	Z+5, r19	; 0x05
     3c4:	24 83       	std	Z+4, r18	; 0x04
	SDIN_PIN = SDIN;
     3c6:	17 83       	std	Z+7, r17	; 0x07
     3c8:	06 83       	std	Z+6, r16	; 0x06
	SCLK_PIN = SCLK;
     3ca:	e0 86       	std	Z+8, r14	; 0x08
     3cc:	f1 86       	std	Z+9, r15	; 0x09
	DDR_RST |= (1<<RST_PIN);
     3ce:	41 b3       	in	r20, 0x11	; 17
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	9c 01       	movw	r18, r24
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <_ZN7PCD8544C1Eiiiii+0x2c>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	6a 95       	dec	r22
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <_ZN7PCD8544C1Eiiiii+0x28>
     3e0:	24 2b       	or	r18, r20
     3e2:	21 bb       	out	0x11, r18	; 17
	DDR_PCD |= (1<<SCE_PIN) | (1<<DC_PIN) | (1<<SDIN_PIN) | (1<<SCLK_PIN);
     3e4:	34 b3       	in	r19, 0x14	; 20
     3e6:	bc 01       	movw	r22, r24
     3e8:	02 80       	ldd	r0, Z+2	; 0x02
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <_ZN7PCD8544C1Eiiiii+0x40>
     3ec:	66 0f       	add	r22, r22
     3ee:	77 1f       	adc	r23, r23
     3f0:	0a 94       	dec	r0
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <_ZN7PCD8544C1Eiiiii+0x3c>
     3f4:	ac 01       	movw	r20, r24
     3f6:	04 80       	ldd	r0, Z+4	; 0x04
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <_ZN7PCD8544C1Eiiiii+0x4e>
     3fa:	44 0f       	add	r20, r20
     3fc:	55 1f       	adc	r21, r21
     3fe:	0a 94       	dec	r0
     400:	e2 f7       	brpl	.-8      	; 0x3fa <_ZN7PCD8544C1Eiiiii+0x4a>
     402:	46 2b       	or	r20, r22
     404:	24 2f       	mov	r18, r20
     406:	23 2b       	or	r18, r19
     408:	ac 01       	movw	r20, r24
     40a:	06 80       	ldd	r0, Z+6	; 0x06
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40e:	44 0f       	add	r20, r20
     410:	55 1f       	adc	r21, r21
     412:	0a 94       	dec	r0
     414:	e2 f7       	brpl	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     416:	42 2b       	or	r20, r18
     418:	9c 01       	movw	r18, r24
     41a:	00 84       	ldd	r0, Z+8	; 0x08
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41e:	22 0f       	add	r18, r18
     420:	33 1f       	adc	r19, r19
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     426:	24 2b       	or	r18, r20
     428:	24 bb       	out	0x14, r18	; 20
	PORT_PCD |= (1<<SCE_PIN);
     42a:	45 b3       	in	r20, 0x15	; 21
     42c:	9c 01       	movw	r18, r24
     42e:	02 80       	ldd	r0, Z+2	; 0x02
     430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     432:	22 0f       	add	r18, r18
     434:	33 1f       	adc	r19, r19
     436:	0a 94       	dec	r0
     438:	e2 f7       	brpl	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     43a:	24 2b       	or	r18, r20
     43c:	25 bb       	out	0x15, r18	; 21
	PORT_RST |= (1<<RST_PIN);
     43e:	42 b3       	in	r20, 0x12	; 18
     440:	9c 01       	movw	r18, r24
     442:	00 80       	ld	r0, Z
     444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     446:	22 0f       	add	r18, r18
     448:	33 1f       	adc	r19, r19
     44a:	0a 94       	dec	r0
     44c:	e2 f7       	brpl	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     44e:	24 2b       	or	r18, r20
     450:	22 bb       	out	0x12, r18	; 18
	PORT_PCD &= ~(1<<SCLK);
     452:	25 b3       	in	r18, 0x15	; 21
     454:	02 c0       	rjmp	.+4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	ea 94       	dec	r14
     45c:	e2 f7       	brpl	.-8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     45e:	80 95       	com	r24
     460:	82 23       	and	r24, r18
     462:	85 bb       	out	0x15, r24	; 21
}
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
     46c:	08 95       	ret

0000046e <_ZN7PCD85449sendToPCDEih>:

//Send data or command to PCD8544
void PCD8544::sendToPCD(int type, uint8_t data){
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	fc 01       	movw	r30, r24
	PORT_PCD &= ~(1<<SCE_PIN);
     474:	25 b3       	in	r18, 0x15	; 21
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	02 80       	ldd	r0, Z+2	; 0x02
     47c:	02 c0       	rjmp	.+4      	; 0x482 <_ZN7PCD85449sendToPCDEih+0x14>
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	0a 94       	dec	r0
     484:	e2 f7       	brpl	.-8      	; 0x47e <_ZN7PCD85449sendToPCDEih+0x10>
     486:	80 95       	com	r24
     488:	82 23       	and	r24, r18
     48a:	85 bb       	out	0x15, r24	; 21
	
	if (type == PCD8544_DATA){
     48c:	61 30       	cpi	r22, 0x01	; 1
     48e:	71 05       	cpc	r23, r1
     490:	61 f4       	brne	.+24     	; 0x4aa <_ZN7PCD85449sendToPCDEih+0x3c>
		PORT_PCD |= (1<<DC_PIN);
     492:	25 b3       	in	r18, 0x15	; 21
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	04 80       	ldd	r0, Z+4	; 0x04
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <_ZN7PCD85449sendToPCDEih+0x32>
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	0a 94       	dec	r0
     4a2:	e2 f7       	brpl	.-8      	; 0x49c <_ZN7PCD85449sendToPCDEih+0x2e>
     4a4:	82 2b       	or	r24, r18
     4a6:	85 bb       	out	0x15, r24	; 21
     4a8:	52 c0       	rjmp	.+164    	; 0x54e <_ZN7PCD85449sendToPCDEih+0xe0>
	}
	else{
		PORT_PCD &= ~(1<<DC_PIN);
     4aa:	25 b3       	in	r18, 0x15	; 21
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	04 80       	ldd	r0, Z+4	; 0x04
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <_ZN7PCD85449sendToPCDEih+0x4a>
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	0a 94       	dec	r0
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <_ZN7PCD85449sendToPCDEih+0x46>
     4bc:	80 95       	com	r24
     4be:	82 23       	and	r24, r18
     4c0:	85 bb       	out	0x15, r24	; 21
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_ZN7PCD85449sendToPCDEih+0xe0>
	}
	
	for (int i = 0; i < 8; i++){
		if ((data >> (7-i)) & 0x01){
     4c4:	ce 01       	movw	r24, r28
     4c6:	02 2e       	mov	r0, r18
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <_ZN7PCD85449sendToPCDEih+0x60>
     4ca:	95 95       	asr	r25
     4cc:	87 95       	ror	r24
     4ce:	0a 94       	dec	r0
     4d0:	e2 f7       	brpl	.-8      	; 0x4ca <_ZN7PCD85449sendToPCDEih+0x5c>
     4d2:	80 ff       	sbrs	r24, 0
     4d4:	0b c0       	rjmp	.+22     	; 0x4ec <_ZN7PCD85449sendToPCDEih+0x7e>
			PORT_PCD |= (1<<SDIN_PIN);
     4d6:	45 b3       	in	r20, 0x15	; 21
     4d8:	cd 01       	movw	r24, r26
     4da:	06 80       	ldd	r0, Z+6	; 0x06
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <_ZN7PCD85449sendToPCDEih+0x74>
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	0a 94       	dec	r0
     4e4:	e2 f7       	brpl	.-8      	; 0x4de <_ZN7PCD85449sendToPCDEih+0x70>
     4e6:	84 2b       	or	r24, r20
     4e8:	85 bb       	out	0x15, r24	; 21
     4ea:	0c c0       	rjmp	.+24     	; 0x504 <_ZN7PCD85449sendToPCDEih+0x96>
		}
		else{
			PORT_PCD &= ~(1<<SDIN_PIN);
     4ec:	95 b3       	in	r25, 0x15	; 21
     4ee:	ad 01       	movw	r20, r26
     4f0:	06 80       	ldd	r0, Z+6	; 0x06
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <_ZN7PCD85449sendToPCDEih+0x8a>
     4f4:	44 0f       	add	r20, r20
     4f6:	55 1f       	adc	r21, r21
     4f8:	0a 94       	dec	r0
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <_ZN7PCD85449sendToPCDEih+0x86>
     4fc:	84 2f       	mov	r24, r20
     4fe:	80 95       	com	r24
     500:	89 23       	and	r24, r25
     502:	85 bb       	out	0x15, r24	; 21
		}
		
		PORT_PCD |= (1<<SCLK_PIN);
     504:	85 b3       	in	r24, 0x15	; 21
     506:	bd 01       	movw	r22, r26
     508:	00 84       	ldd	r0, Z+8	; 0x08
     50a:	02 c0       	rjmp	.+4      	; 0x510 <_ZN7PCD85449sendToPCDEih+0xa2>
     50c:	66 0f       	add	r22, r22
     50e:	77 1f       	adc	r23, r23
     510:	0a 94       	dec	r0
     512:	e2 f7       	brpl	.-8      	; 0x50c <_ZN7PCD85449sendToPCDEih+0x9e>
     514:	68 2b       	or	r22, r24
     516:	65 bb       	out	0x15, r22	; 21
		PORT_PCD &= ~(1<<SCLK_PIN);
     518:	55 b3       	in	r21, 0x15	; 21
     51a:	bd 01       	movw	r22, r26
     51c:	00 84       	ldd	r0, Z+8	; 0x08
     51e:	02 c0       	rjmp	.+4      	; 0x524 <_ZN7PCD85449sendToPCDEih+0xb6>
     520:	66 0f       	add	r22, r22
     522:	77 1f       	adc	r23, r23
     524:	0a 94       	dec	r0
     526:	e2 f7       	brpl	.-8      	; 0x520 <_ZN7PCD85449sendToPCDEih+0xb2>
     528:	96 2f       	mov	r25, r22
     52a:	90 95       	com	r25
     52c:	95 23       	and	r25, r21
     52e:	95 bb       	out	0x15, r25	; 21
     530:	21 50       	subi	r18, 0x01	; 1
     532:	31 09       	sbc	r19, r1
     534:	38 f6       	brcc	.-114    	; 0x4c4 <_ZN7PCD85449sendToPCDEih+0x56>
	}
	PORT_PCD |= (1<<SCE_PIN);
     536:	25 b3       	in	r18, 0x15	; 21
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	02 80       	ldd	r0, Z+2	; 0x02
     53e:	02 c0       	rjmp	.+4      	; 0x544 <_ZN7PCD85449sendToPCDEih+0xd6>
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	0a 94       	dec	r0
     546:	e2 f7       	brpl	.-8      	; 0x540 <_ZN7PCD85449sendToPCDEih+0xd2>
     548:	82 2b       	or	r24, r18
     54a:	85 bb       	out	0x15, r24	; 21
	return ;
     54c:	07 c0       	rjmp	.+14     	; 0x55c <_ZN7PCD85449sendToPCDEih+0xee>
	PORT_RST |= (1<<RST_PIN);
	PORT_PCD &= ~(1<<SCLK);
}

//Send data or command to PCD8544
void PCD8544::sendToPCD(int type, uint8_t data){
     54e:	27 e0       	ldi	r18, 0x07	; 7
     550:	30 e0       	ldi	r19, 0x00	; 0
	else{
		PORT_PCD &= ~(1<<DC_PIN);
	}
	
	for (int i = 0; i < 8; i++){
		if ((data >> (7-i)) & 0x01){
     552:	c4 2f       	mov	r28, r20
     554:	d0 e0       	ldi	r29, 0x00	; 0
			PORT_PCD |= (1<<SDIN_PIN);
		}
		else{
			PORT_PCD &= ~(1<<SDIN_PIN);
     556:	a1 e0       	ldi	r26, 0x01	; 1
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	b4 cf       	rjmp	.-152    	; 0x4c4 <_ZN7PCD85449sendToPCDEih+0x56>
		PORT_PCD |= (1<<SCLK_PIN);
		PORT_PCD &= ~(1<<SCLK_PIN);
	}
	PORT_PCD |= (1<<SCE_PIN);
	return ;
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <_ZN7PCD854411sendCommandEh>:

void PCD8544::sendCommand(uint8_t data){
     562:	46 2f       	mov	r20, r22
	sendToPCD(PCD8544_CMD, data);
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	82 df       	rcall	.-252    	; 0x46e <_ZN7PCD85449sendToPCDEih>
     56a:	08 95       	ret

0000056c <_ZN7PCD85448sendDataEh>:
	return ;
}

void PCD8544::sendData(uint8_t data){
     56c:	46 2f       	mov	r20, r22
	sendToPCD(PCD8544_DATA, data);
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	7d df       	rcall	.-262    	; 0x46e <_ZN7PCD85449sendToPCDEih>
     574:	08 95       	ret

00000576 <_ZN7PCD85449setCursorEhh>:
}



// 0 <= x < 84; 0 <= y < 6
void PCD8544::setCursor(uint8_t x, uint8_t y){
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
     580:	06 2f       	mov	r16, r22
     582:	14 2f       	mov	r17, r20
	this->sendCommand(0x20);
     584:	60 e2       	ldi	r22, 0x20	; 32
     586:	ed df       	rcall	.-38     	; 0x562 <_ZN7PCD854411sendCommandEh>
	this->sendCommand((0x80 | x));
     588:	60 2f       	mov	r22, r16
     58a:	60 68       	ori	r22, 0x80	; 128
     58c:	ce 01       	movw	r24, r28
     58e:	e9 df       	rcall	.-46     	; 0x562 <_ZN7PCD854411sendCommandEh>
	this->sendCommand((0x40 | y));	
     590:	61 2f       	mov	r22, r17
     592:	60 64       	ori	r22, 0x40	; 64
     594:	ce 01       	movw	r24, r28
     596:	e5 df       	rcall	.-54     	; 0x562 <_ZN7PCD854411sendCommandEh>
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	08 95       	ret

000005a2 <_ZN7PCD85445resetEv>:

void PCD8544::reset(){
     5a2:	fc 01       	movw	r30, r24
	PORT_PCD |= (1<<SCE_PIN);
     5a4:	45 b3       	in	r20, 0x15	; 21
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	c9 01       	movw	r24, r18
     5ac:	02 80       	ldd	r0, Z+2	; 0x02
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <_ZN7PCD85445resetEv+0x12>
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	0a 94       	dec	r0
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <_ZN7PCD85445resetEv+0xe>
     5b8:	84 2b       	or	r24, r20
     5ba:	85 bb       	out	0x15, r24	; 21
	PORT_RST |= (1<<RST_PIN);
     5bc:	42 b3       	in	r20, 0x12	; 18
     5be:	c9 01       	movw	r24, r18
     5c0:	00 80       	ld	r0, Z
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <_ZN7PCD85445resetEv+0x26>
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	0a 94       	dec	r0
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <_ZN7PCD85445resetEv+0x22>
     5cc:	84 2b       	or	r24, r20
     5ce:	82 bb       	out	0x12, r24	; 18
	PORT_RST &= ~(1<<RST_PIN);
     5d0:	92 b3       	in	r25, 0x12	; 18
     5d2:	a9 01       	movw	r20, r18
     5d4:	00 80       	ld	r0, Z
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <_ZN7PCD85445resetEv+0x3a>
     5d8:	44 0f       	add	r20, r20
     5da:	55 1f       	adc	r21, r21
     5dc:	0a 94       	dec	r0
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <_ZN7PCD85445resetEv+0x36>
     5e0:	84 2f       	mov	r24, r20
     5e2:	80 95       	com	r24
     5e4:	89 23       	and	r24, r25
     5e6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e8:	83 ed       	ldi	r24, 0xD3	; 211
     5ea:	90 e3       	ldi	r25, 0x30	; 48
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <_ZN7PCD85445resetEv+0x4a>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <_ZN7PCD85445resetEv+0x50>
     5f2:	00 00       	nop
	_delay_ms(50);
	PORT_RST |= (1<<RST_PIN);
     5f4:	82 b3       	in	r24, 0x12	; 18
     5f6:	00 80       	ld	r0, Z
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <_ZN7PCD85445resetEv+0x5c>
     5fa:	22 0f       	add	r18, r18
     5fc:	33 1f       	adc	r19, r19
     5fe:	0a 94       	dec	r0
     600:	e2 f7       	brpl	.-8      	; 0x5fa <_ZN7PCD85445resetEv+0x58>
     602:	28 2b       	or	r18, r24
     604:	22 bb       	out	0x12, r18	; 18
     606:	08 95       	ret

00000608 <_ZN7PCD854410clearSreenEv>:
}

void PCD8544::clearSreen(){
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	8c 01       	movw	r16, r24
	this->setCursor(0x00, 0x00);
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	af df       	rcall	.-162    	; 0x576 <_ZN7PCD85449setCursorEhh>
     618:	c8 ef       	ldi	r28, 0xF8	; 248
     61a:	d1 e0       	ldi	r29, 0x01	; 1
	for (int i = 0; i < 504; i++){
		this->sendData(0x00);
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	c8 01       	movw	r24, r16
     620:	a5 df       	rcall	.-182    	; 0x56c <_ZN7PCD85448sendDataEh>
     622:	21 97       	sbiw	r28, 0x01	; 1
	PORT_RST |= (1<<RST_PIN);
}

void PCD8544::clearSreen(){
	this->setCursor(0x00, 0x00);
	for (int i = 0; i < 504; i++){
     624:	d9 f7       	brne	.-10     	; 0x61c <_ZN7PCD854410clearSreenEv+0x14>
		this->sendData(0x00);
	}
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	08 95       	ret

00000630 <_ZN7PCD85445beginEv>:

//Initial for display in LCD
void PCD8544::begin(){
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	ec 01       	movw	r28, r24
	this->reset();
     636:	b5 df       	rcall	.-150    	; 0x5a2 <_ZN7PCD85445resetEv>
	
	this->sendCommand(0x20 | 0x01); //H = 1
     638:	61 e2       	ldi	r22, 0x21	; 33
     63a:	ce 01       	movw	r24, r28
     63c:	92 df       	rcall	.-220    	; 0x562 <_ZN7PCD854411sendCommandEh>
	this->sendCommand(0x01 | 0x03); //Bias 1:48
     63e:	63 e0       	ldi	r22, 0x03	; 3
     640:	ce 01       	movw	r24, r28
     642:	8f df       	rcall	.-226    	; 0x562 <_ZN7PCD854411sendCommandEh>
	this->sendCommand(0x80 | 0xC5); //Set contrast
     644:	65 ec       	ldi	r22, 0xC5	; 197
     646:	ce 01       	movw	r24, r28
     648:	8c df       	rcall	.-232    	; 0x562 <_ZN7PCD854411sendCommandEh>
	this->sendCommand(0x04 | 0x00); //Set TC0
     64a:	64 e0       	ldi	r22, 0x04	; 4
     64c:	ce 01       	movw	r24, r28
     64e:	89 df       	rcall	.-238    	; 0x562 <_ZN7PCD854411sendCommandEh>
	
	this->sendCommand(0x20 | 0x00); //H = 0
     650:	60 e2       	ldi	r22, 0x20	; 32
     652:	ce 01       	movw	r24, r28
     654:	86 df       	rcall	.-244    	; 0x562 <_ZN7PCD854411sendCommandEh>
	this->sendCommand(0x08 | 0x04); //Normal Mode
     656:	6c e0       	ldi	r22, 0x0C	; 12
     658:	ce 01       	movw	r24, r28
     65a:	83 df       	rcall	.-250    	; 0x562 <_ZN7PCD854411sendCommandEh>
	this->sendCommand(0x80 | 0x00); //x-address = 0
     65c:	60 e8       	ldi	r22, 0x80	; 128
     65e:	ce 01       	movw	r24, r28
     660:	80 df       	rcall	.-256    	; 0x562 <_ZN7PCD854411sendCommandEh>
	this->sendCommand(0x40 | 0x00); //y-address = 0
     662:	60 e4       	ldi	r22, 0x40	; 64
     664:	ce 01       	movw	r24, r28
     666:	7d df       	rcall	.-262    	; 0x562 <_ZN7PCD854411sendCommandEh>
	
	this->clearSreen();
     668:	ce 01       	movw	r24, r28
     66a:	ce df       	rcall	.-100    	; 0x608 <_ZN7PCD854410clearSreenEv>
}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <_ZN7PCD854411charDisplayEic>:

//Display a single character
void PCD8544::charDisplay(int isReverse, char data){
     672:	df 92       	push	r13
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	8c 01       	movw	r16, r24
	register uint8_t reverse;
	if (isReverse){
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	67 2b       	or	r22, r23
     686:	09 f4       	brne	.+2      	; 0x68a <_ZN7PCD854411charDisplayEic+0x18>
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	d8 2e       	mov	r13, r24
     68c:	d1 94       	neg	r13
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	ea 01       	movw	r28, r20
     692:	cc 0f       	add	r28, r28
     694:	dd 1f       	adc	r29, r29
     696:	cc 0f       	add	r28, r28
     698:	dd 1f       	adc	r29, r29
     69a:	4c 0f       	add	r20, r28
     69c:	5d 1f       	adc	r21, r29
     69e:	ea 01       	movw	r28, r20
     6a0:	c9 5b       	subi	r28, 0xB9	; 185
     6a2:	df 4f       	sbci	r29, 0xFF	; 255
	}
	else{
		reverse = 0x00;
	}
	
	for (int i = 0; i < 5; i++){
     6a4:	e1 2c       	mov	r14, r1
     6a6:	f1 2c       	mov	r15, r1
		this->sendData((CHARSET[int(data) - 0x20][i]) ^ reverse);
     6a8:	69 91       	ld	r22, Y+
     6aa:	6d 25       	eor	r22, r13
     6ac:	c8 01       	movw	r24, r16
     6ae:	5e df       	rcall	.-324    	; 0x56c <_ZN7PCD85448sendDataEh>
	}
	else{
		reverse = 0x00;
	}
	
	for (int i = 0; i < 5; i++){
     6b0:	8f ef       	ldi	r24, 0xFF	; 255
     6b2:	e8 1a       	sub	r14, r24
     6b4:	f8 0a       	sbc	r15, r24
     6b6:	85 e0       	ldi	r24, 0x05	; 5
     6b8:	e8 16       	cp	r14, r24
     6ba:	f1 04       	cpc	r15, r1
     6bc:	a9 f7       	brne	.-22     	; 0x6a8 <_ZN7PCD854411charDisplayEic+0x36>
		this->sendData((CHARSET[int(data) - 0x20][i]) ^ reverse);
	}
	this->sendData(reverse);
     6be:	6d 2d       	mov	r22, r13
     6c0:	c8 01       	movw	r24, r16
     6c2:	54 df       	rcall	.-344    	; 0x56c <_ZN7PCD85448sendDataEh>
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	df 90       	pop	r13
     6d2:	08 95       	ret

000006d4 <_ZN7PCD854411lineDisplayEiPc>:

//Display a line of LCD
void PCD8544::lineDisplay(int isReverse, char *data){
     6d4:	9f 92       	push	r9
     6d6:	af 92       	push	r10
     6d8:	bf 92       	push	r11
     6da:	cf 92       	push	r12
     6dc:	df 92       	push	r13
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	7c 01       	movw	r14, r24
     6ec:	6b 01       	movw	r12, r22
	register uint8_t space;
	if (isReverse){
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	67 2b       	or	r22, r23
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <_ZN7PCD854411lineDisplayEiPc+0x22>
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	98 2e       	mov	r9, r24
     6f8:	91 94       	neg	r9
	}
	
	//Get string's length
	register int i = 0;
	register int length = 0;
	while (data[i]){
     6fa:	fa 01       	movw	r30, r20
     6fc:	80 81       	ld	r24, Z
     6fe:	88 23       	and	r24, r24
     700:	61 f1       	breq	.+88     	; 0x75a <_ZN7PCD854411lineDisplayEiPc+0x86>
     702:	31 96       	adiw	r30, 0x01	; 1
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
		length++;
     708:	01 96       	adiw	r24, 0x01	; 1
	}
	
	//Get string's length
	register int i = 0;
	register int length = 0;
	while (data[i]){
     70a:	21 91       	ld	r18, Z+
     70c:	21 11       	cpse	r18, r1
     70e:	fc cf       	rjmp	.-8      	; 0x708 <_ZN7PCD854411lineDisplayEiPc+0x34>
     710:	8c 01       	movw	r16, r24
     712:	0f 97       	sbiw	r24, 0x0f	; 15
     714:	14 f0       	brlt	.+4      	; 0x71a <_ZN7PCD854411lineDisplayEiPc+0x46>
     716:	0e e0       	ldi	r16, 0x0E	; 14
     718:	10 e0       	ldi	r17, 0x00	; 0
		i++;
	}
	if (length > 14){
		length = 14;
	}
	for (i = 0; i < length; i++){
     71a:	10 16       	cp	r1, r16
     71c:	11 06       	cpc	r1, r17
     71e:	8c f0       	brlt	.+34     	; 0x742 <_ZN7PCD854411lineDisplayEiPc+0x6e>
		this->charDisplay(isReverse, data[i]);
	}
	for (i = 0; i < (14 - length)*6 ; i++){
     720:	8e e0       	ldi	r24, 0x0E	; 14
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	9c 01       	movw	r18, r24
     726:	20 1b       	sub	r18, r16
     728:	31 0b       	sbc	r19, r17
     72a:	89 01       	movw	r16, r18
     72c:	c9 01       	movw	r24, r18
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	08 0f       	add	r16, r24
     734:	19 1f       	adc	r17, r25
     736:	00 0f       	add	r16, r16
     738:	11 1f       	adc	r17, r17
     73a:	10 16       	cp	r1, r16
     73c:	11 06       	cpc	r1, r17
     73e:	7c f0       	brlt	.+30     	; 0x75e <_ZN7PCD854411lineDisplayEiPc+0x8a>
     740:	17 c0       	rjmp	.+46     	; 0x770 <_ZN7PCD854411lineDisplayEiPc+0x9c>
     742:	ea 01       	movw	r28, r20
     744:	5a 01       	movw	r10, r20
     746:	a0 0e       	add	r10, r16
     748:	b1 1e       	adc	r11, r17
	}
	if (length > 14){
		length = 14;
	}
	for (i = 0; i < length; i++){
		this->charDisplay(isReverse, data[i]);
     74a:	49 91       	ld	r20, Y+
     74c:	b6 01       	movw	r22, r12
     74e:	c7 01       	movw	r24, r14
     750:	90 df       	rcall	.-224    	; 0x672 <_ZN7PCD854411charDisplayEic>
		i++;
	}
	if (length > 14){
		length = 14;
	}
	for (i = 0; i < length; i++){
     752:	ca 15       	cp	r28, r10
     754:	db 05       	cpc	r29, r11
     756:	c9 f7       	brne	.-14     	; 0x74a <_ZN7PCD854411lineDisplayEiPc+0x76>
     758:	e3 cf       	rjmp	.-58     	; 0x720 <_ZN7PCD854411lineDisplayEiPc+0x4c>
		this->charDisplay(isReverse, data[i]);
	}
	for (i = 0; i < (14 - length)*6 ; i++){
     75a:	04 e5       	ldi	r16, 0x54	; 84
     75c:	10 e0       	ldi	r17, 0x00	; 0
     75e:	c0 e0       	ldi	r28, 0x00	; 0
     760:	d0 e0       	ldi	r29, 0x00	; 0
		this->sendData(space);
     762:	69 2d       	mov	r22, r9
     764:	c7 01       	movw	r24, r14
     766:	02 df       	rcall	.-508    	; 0x56c <_ZN7PCD85448sendDataEh>
		length = 14;
	}
	for (i = 0; i < length; i++){
		this->charDisplay(isReverse, data[i]);
	}
	for (i = 0; i < (14 - length)*6 ; i++){
     768:	21 96       	adiw	r28, 0x01	; 1
     76a:	0c 17       	cp	r16, r28
     76c:	1d 07       	cpc	r17, r29
     76e:	c9 f7       	brne	.-14     	; 0x762 <_ZN7PCD854411lineDisplayEiPc+0x8e>
		this->sendData(space);
	}
}
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	cf 90       	pop	r12
     780:	bf 90       	pop	r11
     782:	af 90       	pop	r10
     784:	9f 90       	pop	r9
     786:	08 95       	ret

00000788 <_ZN7PCD854410createMenuEiiiPcPS0_>:

void PCD8544::createMenu(int x, int y, int length ,char *name, char *data[]){
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	dc 01       	movw	r26, r24
	this->pointer = x;
     792:	1b 96       	adiw	r26, 0x0b	; 11
     794:	7c 93       	st	X, r23
     796:	6e 93       	st	-X, r22
     798:	1a 97       	sbiw	r26, 0x0a	; 10
	this->current = y;
     79a:	1d 96       	adiw	r26, 0x0d	; 13
     79c:	5c 93       	st	X, r21
     79e:	4e 93       	st	-X, r20
     7a0:	1c 97       	sbiw	r26, 0x0c	; 12
	this->lenOfMenu = length;
     7a2:	1f 96       	adiw	r26, 0x0f	; 15
     7a4:	3c 93       	st	X, r19
     7a6:	2e 93       	st	-X, r18
     7a8:	1e 97       	sbiw	r26, 0x0e	; 14
	this->title = name;
     7aa:	51 96       	adiw	r26, 0x11	; 17
     7ac:	1c 93       	st	X, r17
     7ae:	0e 93       	st	-X, r16
     7b0:	50 97       	sbiw	r26, 0x10	; 16
	for (int i = 0; i < this->lenOfMenu; i++){
     7b2:	12 16       	cp	r1, r18
     7b4:	13 06       	cpc	r1, r19
     7b6:	6c f4       	brge	.+26     	; 0x7d2 <_ZN7PCD854410createMenuEiiiPcPS0_+0x4a>
     7b8:	f7 01       	movw	r30, r14
     7ba:	52 96       	adiw	r26, 0x12	; 18
     7bc:	22 0f       	add	r18, r18
     7be:	33 1f       	adc	r19, r19
     7c0:	e2 0e       	add	r14, r18
     7c2:	f3 1e       	adc	r15, r19
		this->Menu[i] = data[i]; 
     7c4:	81 91       	ld	r24, Z+
     7c6:	91 91       	ld	r25, Z+
     7c8:	8d 93       	st	X+, r24
     7ca:	9d 93       	st	X+, r25
void PCD8544::createMenu(int x, int y, int length ,char *name, char *data[]){
	this->pointer = x;
	this->current = y;
	this->lenOfMenu = length;
	this->title = name;
	for (int i = 0; i < this->lenOfMenu; i++){
     7cc:	ee 15       	cp	r30, r14
     7ce:	ff 05       	cpc	r31, r15
     7d0:	c9 f7       	brne	.-14     	; 0x7c4 <_ZN7PCD854410createMenuEiiiPcPS0_+0x3c>
		this->Menu[i] = data[i]; 
	}
}
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	08 95       	ret

000007dc <_ZN7PCD854411displayMenuEv>:

void PCD8544::displayMenu(){
     7dc:	df 92       	push	r13
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	ec 01       	movw	r28, r24
	
	this->setCursor(0, 0);
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	c2 de       	rcall	.-636    	; 0x576 <_ZN7PCD85449setCursorEhh>
	this->lineDisplay(NON_REVERSE, title);
     7f2:	48 89       	ldd	r20, Y+16	; 0x10
     7f4:	59 89       	ldd	r21, Y+17	; 0x11
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	ce 01       	movw	r24, r28
     7fc:	6b df       	rcall	.-298    	; 0x6d4 <_ZN7PCD854411lineDisplayEiPc>
	
	register int i;
	if (this->lenOfMenu < 5){
     7fe:	ee 84       	ldd	r14, Y+14	; 0x0e
     800:	ff 84       	ldd	r15, Y+15	; 0x0f
     802:	85 e0       	ldi	r24, 0x05	; 5
     804:	e8 16       	cp	r14, r24
     806:	f1 04       	cpc	r15, r1
     808:	f4 f5       	brge	.+124    	; 0x886 <_ZN7PCD854411displayMenuEv+0xaa>
		for (i = 0; i < this->lenOfMenu; i++){
     80a:	1e 14       	cp	r1, r14
     80c:	1f 04       	cpc	r1, r15
     80e:	34 f5       	brge	.+76     	; 0x85c <_ZN7PCD854411displayMenuEv+0x80>
     810:	dd 24       	eor	r13, r13
     812:	d3 94       	inc	r13
     814:	00 e0       	ldi	r16, 0x00	; 0
     816:	10 e0       	ldi	r17, 0x00	; 0
     818:	05 c0       	rjmp	.+10     	; 0x824 <_ZN7PCD854411displayMenuEv+0x48>
			this->setCursor(0, i + 1);
			this->lineDisplay(NON_REVERSE, Menu[current + i]);
		}
		for(i = this->lenOfMenu; i < 5; i++){
     81a:	85 e0       	ldi	r24, 0x05	; 5
     81c:	e8 16       	cp	r14, r24
     81e:	f1 04       	cpc	r15, r1
     820:	ec f0       	brlt	.+58     	; 0x85c <_ZN7PCD854411displayMenuEv+0x80>
     822:	4e c0       	rjmp	.+156    	; 0x8c0 <_ZN7PCD854411displayMenuEv+0xe4>
	this->lineDisplay(NON_REVERSE, title);
	
	register int i;
	if (this->lenOfMenu < 5){
		for (i = 0; i < this->lenOfMenu; i++){
			this->setCursor(0, i + 1);
     824:	4d 2d       	mov	r20, r13
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	ce 01       	movw	r24, r28
     82a:	a5 de       	rcall	.-694    	; 0x576 <_ZN7PCD85449setCursorEhh>
			this->lineDisplay(NON_REVERSE, Menu[current + i]);
     82c:	ec 85       	ldd	r30, Y+12	; 0x0c
     82e:	fd 85       	ldd	r31, Y+13	; 0x0d
     830:	e0 0f       	add	r30, r16
     832:	f1 1f       	adc	r31, r17
     834:	39 96       	adiw	r30, 0x09	; 9
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	ec 0f       	add	r30, r28
     83c:	fd 1f       	adc	r31, r29
     83e:	40 81       	ld	r20, Z
     840:	51 81       	ldd	r21, Z+1	; 0x01
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	ce 01       	movw	r24, r28
     848:	45 df       	rcall	.-374    	; 0x6d4 <_ZN7PCD854411lineDisplayEiPc>
	this->setCursor(0, 0);
	this->lineDisplay(NON_REVERSE, title);
	
	register int i;
	if (this->lenOfMenu < 5){
		for (i = 0; i < this->lenOfMenu; i++){
     84a:	0f 5f       	subi	r16, 0xFF	; 255
     84c:	1f 4f       	sbci	r17, 0xFF	; 255
     84e:	ee 84       	ldd	r14, Y+14	; 0x0e
     850:	ff 84       	ldd	r15, Y+15	; 0x0f
     852:	d3 94       	inc	r13
     854:	0e 15       	cp	r16, r14
     856:	1f 05       	cpc	r17, r15
     858:	2c f3       	brlt	.-54     	; 0x824 <_ZN7PCD854411displayMenuEv+0x48>
     85a:	df cf       	rjmp	.-66     	; 0x81a <_ZN7PCD854411displayMenuEv+0x3e>
     85c:	11 e0       	ldi	r17, 0x01	; 1
     85e:	1e 0d       	add	r17, r14
			this->setCursor(0, i + 1);
			this->lineDisplay(NON_REVERSE, Menu[current + i]);
		}
		for(i = this->lenOfMenu; i < 5; i++){
			this->setCursor(0, i + 1);
     860:	41 2f       	mov	r20, r17
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	ce 01       	movw	r24, r28
     866:	87 de       	rcall	.-754    	; 0x576 <_ZN7PCD85449setCursorEhh>
			this->lineDisplay(NON_REVERSE, " ");
     868:	45 ee       	ldi	r20, 0xE5	; 229
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	ce 01       	movw	r24, r28
     872:	30 df       	rcall	.-416    	; 0x6d4 <_ZN7PCD854411lineDisplayEiPc>
	if (this->lenOfMenu < 5){
		for (i = 0; i < this->lenOfMenu; i++){
			this->setCursor(0, i + 1);
			this->lineDisplay(NON_REVERSE, Menu[current + i]);
		}
		for(i = this->lenOfMenu; i < 5; i++){
     874:	8f ef       	ldi	r24, 0xFF	; 255
     876:	e8 1a       	sub	r14, r24
     878:	f8 0a       	sbc	r15, r24
     87a:	1f 5f       	subi	r17, 0xFF	; 255
     87c:	85 e0       	ldi	r24, 0x05	; 5
     87e:	e8 16       	cp	r14, r24
     880:	f1 04       	cpc	r15, r1
     882:	74 f3       	brlt	.-36     	; 0x860 <_ZN7PCD854411displayMenuEv+0x84>
     884:	1d c0       	rjmp	.+58     	; 0x8c0 <_ZN7PCD854411displayMenuEv+0xe4>
     886:	ff 24       	eor	r15, r15
     888:	f3 94       	inc	r15
     88a:	00 e0       	ldi	r16, 0x00	; 0
     88c:	10 e0       	ldi	r17, 0x00	; 0
			this->lineDisplay(NON_REVERSE, " ");
		}
	}
	else{
		for (i = 0; i < 5; i++){
			this->setCursor(0, i + 1);
     88e:	4f 2d       	mov	r20, r15
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	ce 01       	movw	r24, r28
     894:	70 de       	rcall	.-800    	; 0x576 <_ZN7PCD85449setCursorEhh>
			this->lineDisplay(NON_REVERSE, Menu[current + i]);
     896:	ec 85       	ldd	r30, Y+12	; 0x0c
     898:	fd 85       	ldd	r31, Y+13	; 0x0d
     89a:	e0 0f       	add	r30, r16
     89c:	f1 1f       	adc	r31, r17
     89e:	39 96       	adiw	r30, 0x09	; 9
     8a0:	ee 0f       	add	r30, r30
     8a2:	ff 1f       	adc	r31, r31
     8a4:	ec 0f       	add	r30, r28
     8a6:	fd 1f       	adc	r31, r29
     8a8:	40 81       	ld	r20, Z
     8aa:	51 81       	ldd	r21, Z+1	; 0x01
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	ce 01       	movw	r24, r28
     8b2:	10 df       	rcall	.-480    	; 0x6d4 <_ZN7PCD854411lineDisplayEiPc>
			this->setCursor(0, i + 1);
			this->lineDisplay(NON_REVERSE, " ");
		}
	}
	else{
		for (i = 0; i < 5; i++){
     8b4:	0f 5f       	subi	r16, 0xFF	; 255
     8b6:	1f 4f       	sbci	r17, 0xFF	; 255
     8b8:	f3 94       	inc	r15
     8ba:	86 e0       	ldi	r24, 0x06	; 6
     8bc:	f8 12       	cpse	r15, r24
     8be:	e7 cf       	rjmp	.-50     	; 0x88e <_ZN7PCD854411displayMenuEv+0xb2>
			this->setCursor(0, i + 1);
			this->lineDisplay(NON_REVERSE, Menu[current + i]);
		}
	}
	this->setCursor(0, (pointer - current) + 1);
     8c0:	4a 85       	ldd	r20, Y+10	; 0x0a
     8c2:	4f 5f       	subi	r20, 0xFF	; 255
     8c4:	8c 85       	ldd	r24, Y+12	; 0x0c
     8c6:	48 1b       	sub	r20, r24
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	ce 01       	movw	r24, r28
     8cc:	54 de       	rcall	.-856    	; 0x576 <_ZN7PCD85449setCursorEhh>
	lineDisplay(REVERSE, Menu[pointer]);
     8ce:	ea 85       	ldd	r30, Y+10	; 0x0a
     8d0:	fb 85       	ldd	r31, Y+11	; 0x0b
     8d2:	39 96       	adiw	r30, 0x09	; 9
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	ec 0f       	add	r30, r28
     8da:	fd 1f       	adc	r31, r29
     8dc:	40 81       	ld	r20, Z
     8de:	51 81       	ldd	r21, Z+1	; 0x01
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	ce 01       	movw	r24, r28
     8e6:	f6 de       	rcall	.-532    	; 0x6d4 <_ZN7PCD854411lineDisplayEiPc>
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	08 95       	ret

000008f8 <_ZN7PCD854410getPointerEv>:

int PCD8544::getPointer(){
	return this->pointer;
};
     8f8:	fc 01       	movw	r30, r24
     8fa:	82 85       	ldd	r24, Z+10	; 0x0a
     8fc:	93 85       	ldd	r25, Z+11	; 0x0b
     8fe:	08 95       	ret

00000900 <_ZN7PCD85448getTitleEv>:

char* PCD8544::getTitle(){
	return this->title;
}
     900:	fc 01       	movw	r30, r24
     902:	80 89       	ldd	r24, Z+16	; 0x10
     904:	91 89       	ldd	r25, Z+17	; 0x11
     906:	08 95       	ret

00000908 <_ZN7PCD854415increasePointerEv>:
void PCD8544::increasePointer(){
     908:	fc 01       	movw	r30, r24
	if ((pointer + 1) < this->lenOfMenu){
     90a:	22 85       	ldd	r18, Z+10	; 0x0a
     90c:	33 85       	ldd	r19, Z+11	; 0x0b
     90e:	2f 5f       	subi	r18, 0xFF	; 255
     910:	3f 4f       	sbci	r19, 0xFF	; 255
     912:	86 85       	ldd	r24, Z+14	; 0x0e
     914:	97 85       	ldd	r25, Z+15	; 0x0f
     916:	28 17       	cp	r18, r24
     918:	39 07       	cpc	r19, r25
     91a:	8c f4       	brge	.+34     	; 0x93e <_ZN7PCD854415increasePointerEv+0x36>
		pointer++;
     91c:	33 87       	std	Z+11, r19	; 0x0b
     91e:	22 87       	std	Z+10, r18	; 0x0a
		if (((this->lenOfMenu - this->current ) > 5) && ((this->pointer - this->current) == 5)){
     920:	44 85       	ldd	r20, Z+12	; 0x0c
     922:	55 85       	ldd	r21, Z+13	; 0x0d
     924:	84 1b       	sub	r24, r20
     926:	95 0b       	sbc	r25, r21
     928:	06 97       	sbiw	r24, 0x06	; 6
     92a:	4c f0       	brlt	.+18     	; 0x93e <_ZN7PCD854415increasePointerEv+0x36>
     92c:	24 1b       	sub	r18, r20
     92e:	35 0b       	sbc	r19, r21
     930:	25 30       	cpi	r18, 0x05	; 5
     932:	31 05       	cpc	r19, r1
     934:	21 f4       	brne	.+8      	; 0x93e <_ZN7PCD854415increasePointerEv+0x36>
			this->current++;
     936:	4f 5f       	subi	r20, 0xFF	; 255
     938:	5f 4f       	sbci	r21, 0xFF	; 255
     93a:	55 87       	std	Z+13, r21	; 0x0d
     93c:	44 87       	std	Z+12, r20	; 0x0c
     93e:	08 95       	ret

00000940 <_ZN7PCD854415decreasePointerEv>:
		}
	}
}

void PCD8544::decreasePointer(){
     940:	fc 01       	movw	r30, r24
	if (this->pointer > 0){
     942:	22 85       	ldd	r18, Z+10	; 0x0a
     944:	33 85       	ldd	r19, Z+11	; 0x0b
     946:	12 16       	cp	r1, r18
     948:	13 06       	cpc	r1, r19
     94a:	94 f4       	brge	.+36     	; 0x970 <_ZN7PCD854415decreasePointerEv+0x30>
		this->pointer--;
     94c:	21 50       	subi	r18, 0x01	; 1
     94e:	31 09       	sbc	r19, r1
     950:	33 87       	std	Z+11, r19	; 0x0b
     952:	22 87       	std	Z+10, r18	; 0x0a
		if (((this->lenOfMenu - this->pointer) > 4) && (this->pointer < this->current)){
     954:	86 85       	ldd	r24, Z+14	; 0x0e
     956:	97 85       	ldd	r25, Z+15	; 0x0f
     958:	82 1b       	sub	r24, r18
     95a:	93 0b       	sbc	r25, r19
     95c:	05 97       	sbiw	r24, 0x05	; 5
     95e:	44 f0       	brlt	.+16     	; 0x970 <_ZN7PCD854415decreasePointerEv+0x30>
     960:	84 85       	ldd	r24, Z+12	; 0x0c
     962:	95 85       	ldd	r25, Z+13	; 0x0d
     964:	28 17       	cp	r18, r24
     966:	39 07       	cpc	r19, r25
     968:	1c f4       	brge	.+6      	; 0x970 <_ZN7PCD854415decreasePointerEv+0x30>
			this->current--;
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	95 87       	std	Z+13, r25	; 0x0d
     96e:	84 87       	std	Z+12, r24	; 0x0c
     970:	08 95       	ret

00000972 <_ZN3PS2C1Ev>:
volatile uint8_t	cmd_ACKValue;
uint8_t				cmd_Parity;
volatile bool		cmd_ACKOk;

PS2::PS2(){
	this->Lights = 0x00;
     972:	fc 01       	movw	r30, r24
     974:	10 82       	st	Z, r1
     976:	08 95       	ret

00000978 <_ZN3PS29oddParityEh>:
}
uint8_t PS2::oddParity(uint8_t data){
	int i, count = 1;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 0; i < 8; i++){
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
		if ((data >> i) & 0x01)
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	ab 01       	movw	r20, r22
     984:	02 2e       	mov	r0, r18
     986:	02 c0       	rjmp	.+4      	; 0x98c <_ZN3PS29oddParityEh+0x14>
     988:	55 95       	asr	r21
     98a:	47 95       	ror	r20
     98c:	0a 94       	dec	r0
     98e:	e2 f7       	brpl	.-8      	; 0x988 <_ZN3PS29oddParityEh+0x10>
     990:	40 fd       	sbrc	r20, 0
		count++;
     992:	01 96       	adiw	r24, 0x01	; 1
PS2::PS2(){
	this->Lights = 0x00;
}
uint8_t PS2::oddParity(uint8_t data){
	int i, count = 1;
	for(i = 0; i < 8; i++){
     994:	2f 5f       	subi	r18, 0xFF	; 255
     996:	3f 4f       	sbci	r19, 0xFF	; 255
     998:	28 30       	cpi	r18, 0x08	; 8
     99a:	31 05       	cpc	r19, r1
     99c:	91 f7       	brne	.-28     	; 0x982 <_ZN3PS29oddParityEh+0xa>
		if ((data >> i) & 0x01)
		count++;
	}
	return count & 0x01;
}
     99e:	81 70       	andi	r24, 0x01	; 1
     9a0:	08 95       	ret

000009a2 <_ZN3PS211sendCommandEh>:

void PS2::sendCommand(uint8_t data){
	cmd_InProgress	= true;
     9a2:	21 e0       	ldi	r18, 0x01	; 1
     9a4:	20 93 e1 02 	sts	0x02E1, r18	; 0x8002e1 <cmd_InProgress>
	cmd_Count		= 0;
     9a8:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <cmd_Count+0x1>
     9ac:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <cmd_Count>
	
	cmd_Value		= data;
     9b0:	60 93 de 02 	sts	0x02DE, r22	; 0x8002de <cmd_Value>
	cmd_ACKValue		= 1;
     9b4:	20 93 dd 02 	sts	0x02DD, r18	; 0x8002dd <cmd_ACKValue>
	cmd_Parity		= oddParity(data);
     9b8:	df df       	rcall	.-66     	; 0x978 <_ZN3PS29oddParityEh>
     9ba:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <cmd_Parity>
	
	//set DATA line  and CLK as OUTPUT to send data to keyboard
	DDR_KB	|= (1<<DATA_PIN);
     9be:	8c 9a       	sbi	0x11, 4	; 17
	DDR_KB		|= (1<<CLK_PIN);
     9c0:	8a 9a       	sbi	0x11, 2	; 17
	
	//Inhibit all communication
	PORT_KB	|= (1<<DATA_PIN);
     9c2:	94 9a       	sbi	0x12, 4	; 18
	PORT_KB	&= ~(1<<CLK_PIN); 
     9c4:	92 98       	cbi	0x12, 2	; 18
     9c6:	2f e7       	ldi	r18, 0x7F	; 127
     9c8:	88 e3       	ldi	r24, 0x38	; 56
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	21 50       	subi	r18, 0x01	; 1
     9ce:	80 40       	sbci	r24, 0x00	; 0
     9d0:	90 40       	sbci	r25, 0x00	; 0
     9d2:	e1 f7       	brne	.-8      	; 0x9cc <_ZN3PS211sendCommandEh+0x2a>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <_ZN3PS211sendCommandEh+0x34>
     9d6:	00 00       	nop

	_delay_ms(50);
	
	PORT_KB	&= ~(1<<DATA_PIN);
     9d8:	94 98       	cbi	0x12, 4	; 18
	
	PORT_KB	|= (1<<CLK_PIN);
     9da:	92 9a       	sbi	0x12, 2	; 18
	DDR_KB		&= ~(1<<CLK_PIN);
     9dc:	8a 98       	cbi	0x11, 2	; 17
	
	//An INT0 Interrupt will generate here
	
	while (cmd_ACKValue != 0);
     9de:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <cmd_ACKValue>
     9e2:	81 11       	cpse	r24, r1
     9e4:	fc cf       	rjmp	.-8      	; 0x9de <_ZN3PS211sendCommandEh+0x3c>
	
	cmd_InProgress = false;
     9e6:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <cmd_InProgress>
     9ea:	08 95       	ret

000009ec <_ZN3PS25beginEv>:
}

void PS2::begin(){
	
	char_Current	= 0x00;
     9ec:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <char_Current>
	char_Received	= 0x00;
     9f0:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <char_Received>
	char_Count		= 0x00;
     9f4:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <char_Count>
	
	kb_Shift		= false;
     9f8:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <kb_Shift>
	
	kb_Capslock		= false;
     9fc:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <kb_Capslock>
	kb_Numlock		= false;
     a00:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <kb_Numlock>
	
	kb_Extend		= false;
     a04:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <kb_Extend>
	kb_Release		= false;
     a08:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <kb_Release>
	
	cmd_InProgress	= false;
     a0c:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <cmd_InProgress>
	cmd_Count		= 0;
     a10:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <cmd_Count+0x1>
     a14:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <cmd_Count>
	cmd_Value		= 0x00;
     a18:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <cmd_Value>
	cmd_ACKValue	= 1;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <cmd_ACKValue>
	
	DDR_KB		&= ~(1<<CLK_PIN);	
     a22:	8a 98       	cbi	0x11, 2	; 17
	
	DDR_KB	&= ~(1<<DATA_PIN);	
     a24:	8c 98       	cbi	0x11, 4	; 17
	PORT_KB	|= (1<<DATA_PIN);
     a26:	94 9a       	sbi	0x12, 4	; 18
	
	MCUCR |= (1<<ISC01);
     a28:	85 b7       	in	r24, 0x35	; 53
     a2a:	82 60       	ori	r24, 0x02	; 2
     a2c:	85 bf       	out	0x35, r24	; 53
	GICR	|= (1<<INT0);
     a2e:	8b b7       	in	r24, 0x3b	; 59
     a30:	80 64       	ori	r24, 0x40	; 64
     a32:	8b bf       	out	0x3b, r24	; 59
     a34:	08 95       	ret

00000a36 <_ZN3PS28setLightEv>:
}

void PS2::setLight(){
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	ec 01       	movw	r28, r24
	cmd_ACKOk = false;
     a3c:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <cmd_ACKOk>
	sendCommand(0xED);
     a40:	6d ee       	ldi	r22, 0xED	; 237
     a42:	af df       	rcall	.-162    	; 0x9a2 <_ZN3PS211sendCommandEh>
	while(!cmd_ACKOk);
     a44:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <cmd_ACKOk>
     a48:	88 23       	and	r24, r24
     a4a:	e1 f3       	breq	.-8      	; 0xa44 <_ZN3PS28setLightEv+0xe>
	sendCommand(this->Lights);
     a4c:	68 81       	ld	r22, Y
     a4e:	ce 01       	movw	r24, r28
     a50:	a8 df       	rcall	.-176    	; 0x9a2 <_ZN3PS211sendCommandEh>
}
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	08 95       	ret

00000a58 <_ZN3PS29availableEv>:
bool PS2::available(){
	return (char_Received != 0);
     a58:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <char_Received>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	91 11       	cpse	r25, r1
     a60:	01 c0       	rjmp	.+2      	; 0xa64 <_ZN3PS29availableEv+0xc>
     a62:	80 e0       	ldi	r24, 0x00	; 0
}
     a64:	08 95       	ret

00000a66 <_ZN3PS27getCharEv>:

uint8_t PS2::getChar(){
     a66:	9c 01       	movw	r18, r24
	uint8_t result;
	result = char_Received;
     a68:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <char_Received>
	switch(result){
     a6c:	49 2f       	mov	r20, r25
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	fa 01       	movw	r30, r20
     a72:	3d 97       	sbiw	r30, 0x0d	; 13
     a74:	e2 37       	cpi	r30, 0x72	; 114
     a76:	f1 05       	cpc	r31, r1
     a78:	08 f0       	brcs	.+2      	; 0xa7c <_ZN3PS27getCharEv+0x16>
     a7a:	52 c1       	rjmp	.+676    	; 0xd20 <_ZN3PS27getCharEv+0x2ba>
     a7c:	d9 01       	movw	r26, r18
     a7e:	ed 5e       	subi	r30, 0xED	; 237
     a80:	ff 4f       	sbci	r31, 0xFF	; 255
     a82:	09 94       	ijmp
		case 0x41: result = kb_Shift ? '<' : ','; break;
		case 0x49: result = kb_Shift ? '>' : '.'; break;
		case 0x4A: result = kb_Shift ? '?' : '/'; break;
		
		case 0x0D: result = '\t';		break;
		case 0x5A: result = '\n';		break;
     a84:	9a e0       	ldi	r25, 0x0A	; 10
     a86:	c7 c1       	rjmp	.+910    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
	uint8_t result;
	result = char_Received;
	switch(result){
		case 0x1C: result = 'a'; break;
		case 0x32: result = 'b'; break;
		case 0x21: result = 'c'; break;
     a88:	93 e6       	ldi	r25, 0x63	; 99
     a8a:	56 c1       	rjmp	.+684    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x23: result = 'd'; break;
		case 0x24: result = 'e'; break;
     a8c:	95 e6       	ldi	r25, 0x65	; 101
     a8e:	54 c1       	rjmp	.+680    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x2B: result = 'f'; break;
     a90:	96 e6       	ldi	r25, 0x66	; 102
     a92:	52 c1       	rjmp	.+676    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x34: result = 'g'; break;
     a94:	97 e6       	ldi	r25, 0x67	; 103
     a96:	50 c1       	rjmp	.+672    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x33: result = 'h'; break;
     a98:	98 e6       	ldi	r25, 0x68	; 104
     a9a:	4e c1       	rjmp	.+668    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x43: result = 'i'; break;
     a9c:	99 e6       	ldi	r25, 0x69	; 105
     a9e:	4c c1       	rjmp	.+664    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x3B: result = 'j'; break;
     aa0:	9a e6       	ldi	r25, 0x6A	; 106
     aa2:	4a c1       	rjmp	.+660    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x42: result = 'k'; break;
     aa4:	9b e6       	ldi	r25, 0x6B	; 107
     aa6:	48 c1       	rjmp	.+656    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x4B: result = 'l'; break;
     aa8:	9c e6       	ldi	r25, 0x6C	; 108
     aaa:	46 c1       	rjmp	.+652    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x3A: result = 'm'; break;
     aac:	9d e6       	ldi	r25, 0x6D	; 109
     aae:	44 c1       	rjmp	.+648    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x31: result = 'n'; break;
     ab0:	9e e6       	ldi	r25, 0x6E	; 110
     ab2:	42 c1       	rjmp	.+644    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x44: result = 'o'; break;
     ab4:	9f e6       	ldi	r25, 0x6F	; 111
     ab6:	40 c1       	rjmp	.+640    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x4D: result = 'p'; break;
     ab8:	90 e7       	ldi	r25, 0x70	; 112
     aba:	3e c1       	rjmp	.+636    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x15: result = 'q'; break;
     abc:	91 e7       	ldi	r25, 0x71	; 113
     abe:	3c c1       	rjmp	.+632    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x2D: result = 'r'; break;
     ac0:	92 e7       	ldi	r25, 0x72	; 114
     ac2:	3a c1       	rjmp	.+628    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x1B: result = 's'; break;
     ac4:	93 e7       	ldi	r25, 0x73	; 115
     ac6:	38 c1       	rjmp	.+624    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x2C: result = 't'; break;
     ac8:	94 e7       	ldi	r25, 0x74	; 116
     aca:	36 c1       	rjmp	.+620    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x3C: result = 'u'; break;
     acc:	95 e7       	ldi	r25, 0x75	; 117
     ace:	34 c1       	rjmp	.+616    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x2A: result = 'v'; break;
     ad0:	96 e7       	ldi	r25, 0x76	; 118
     ad2:	32 c1       	rjmp	.+612    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x1D: result = 'w'; break;
     ad4:	97 e7       	ldi	r25, 0x77	; 119
     ad6:	30 c1       	rjmp	.+608    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x22: result = 'x'; break;
     ad8:	98 e7       	ldi	r25, 0x78	; 120
     ada:	2e c1       	rjmp	.+604    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x35: result = 'y'; break;
     adc:	99 e7       	ldi	r25, 0x79	; 121
     ade:	2c c1       	rjmp	.+600    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x1A: result = 'z'; break;
     ae0:	9a e7       	ldi	r25, 0x7A	; 122
     ae2:	2a c1       	rjmp	.+596    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		
		case 0x45: result = kb_Shift ? ')' : '0'; break;
     ae4:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     ae8:	81 11       	cpse	r24, r1
     aea:	3c c1       	rjmp	.+632    	; 0xd64 <_ZN3PS27getCharEv+0x2fe>
     aec:	90 e3       	ldi	r25, 0x30	; 48
     aee:	93 c1       	rjmp	.+806    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x16: result = kb_Shift ? '!' : '1'; break;
     af0:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     af4:	81 11       	cpse	r24, r1
     af6:	38 c1       	rjmp	.+624    	; 0xd68 <_ZN3PS27getCharEv+0x302>
     af8:	91 e3       	ldi	r25, 0x31	; 49
     afa:	8d c1       	rjmp	.+794    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x1E: result = kb_Shift ? '@' : '2'; break;
     afc:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b00:	81 11       	cpse	r24, r1
     b02:	34 c1       	rjmp	.+616    	; 0xd6c <_ZN3PS27getCharEv+0x306>
     b04:	92 e3       	ldi	r25, 0x32	; 50
     b06:	87 c1       	rjmp	.+782    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x26: result = kb_Shift ? '#' : '3'; break;
     b08:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b0c:	81 11       	cpse	r24, r1
     b0e:	30 c1       	rjmp	.+608    	; 0xd70 <_ZN3PS27getCharEv+0x30a>
     b10:	93 e3       	ldi	r25, 0x33	; 51
     b12:	81 c1       	rjmp	.+770    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x25: result = kb_Shift ? '$' : '4'; break;
     b14:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b18:	81 11       	cpse	r24, r1
     b1a:	2c c1       	rjmp	.+600    	; 0xd74 <_ZN3PS27getCharEv+0x30e>
     b1c:	94 e3       	ldi	r25, 0x34	; 52
     b1e:	7b c1       	rjmp	.+758    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x2E: result = kb_Shift ? '%' : '5'; break;
     b20:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b24:	81 11       	cpse	r24, r1
     b26:	28 c1       	rjmp	.+592    	; 0xd78 <_ZN3PS27getCharEv+0x312>
     b28:	95 e3       	ldi	r25, 0x35	; 53
     b2a:	75 c1       	rjmp	.+746    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x36: result = kb_Shift ? '^' : '6'; break;
     b2c:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b30:	81 11       	cpse	r24, r1
     b32:	24 c1       	rjmp	.+584    	; 0xd7c <_ZN3PS27getCharEv+0x316>
     b34:	70 c1       	rjmp	.+736    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x3D: result = kb_Shift ? '&' : '7'; break;
     b36:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b3a:	81 11       	cpse	r24, r1
     b3c:	21 c1       	rjmp	.+578    	; 0xd80 <_ZN3PS27getCharEv+0x31a>
     b3e:	97 e3       	ldi	r25, 0x37	; 55
     b40:	6a c1       	rjmp	.+724    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x3E: result = kb_Shift ? '*' : '8'; break;
     b42:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b46:	81 11       	cpse	r24, r1
     b48:	1d c1       	rjmp	.+570    	; 0xd84 <_ZN3PS27getCharEv+0x31e>
     b4a:	98 e3       	ldi	r25, 0x38	; 56
     b4c:	64 c1       	rjmp	.+712    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x46: result = kb_Shift ? '(' : '9'; break;
     b4e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b52:	81 11       	cpse	r24, r1
     b54:	19 c1       	rjmp	.+562    	; 0xd88 <_ZN3PS27getCharEv+0x322>
     b56:	99 e3       	ldi	r25, 0x39	; 57
     b58:	5e c1       	rjmp	.+700    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		
		case 0x0E: result = kb_Shift ? '~' : '`'; break;
     b5a:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b5e:	81 11       	cpse	r24, r1
     b60:	15 c1       	rjmp	.+554    	; 0xd8c <_ZN3PS27getCharEv+0x326>
     b62:	90 e6       	ldi	r25, 0x60	; 96
     b64:	58 c1       	rjmp	.+688    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x4E: result = kb_Shift ? '_' : '-'; break;
     b66:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b6a:	81 11       	cpse	r24, r1
     b6c:	11 c1       	rjmp	.+546    	; 0xd90 <_ZN3PS27getCharEv+0x32a>
     b6e:	9d e2       	ldi	r25, 0x2D	; 45
     b70:	52 c1       	rjmp	.+676    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x55: result = kb_Shift ? '+' : '='; break;
     b72:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b76:	81 11       	cpse	r24, r1
     b78:	0d c1       	rjmp	.+538    	; 0xd94 <_ZN3PS27getCharEv+0x32e>
     b7a:	9d e3       	ldi	r25, 0x3D	; 61
     b7c:	4c c1       	rjmp	.+664    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x5D: result = kb_Shift ? '|' : '\\'; break;
     b7e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b82:	81 11       	cpse	r24, r1
     b84:	09 c1       	rjmp	.+530    	; 0xd98 <_ZN3PS27getCharEv+0x332>
     b86:	9c e5       	ldi	r25, 0x5C	; 92
     b88:	46 c1       	rjmp	.+652    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x54: result = kb_Shift ? '{' : '['; break;
     b8a:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b8e:	81 11       	cpse	r24, r1
     b90:	05 c1       	rjmp	.+522    	; 0xd9c <_ZN3PS27getCharEv+0x336>
     b92:	9b e5       	ldi	r25, 0x5B	; 91
     b94:	40 c1       	rjmp	.+640    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x5B: result = kb_Shift ? '}' : ']'; break;
     b96:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     b9a:	81 11       	cpse	r24, r1
     b9c:	01 c1       	rjmp	.+514    	; 0xda0 <_ZN3PS27getCharEv+0x33a>
     b9e:	9d e5       	ldi	r25, 0x5D	; 93
     ba0:	3a c1       	rjmp	.+628    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x4C: result = kb_Shift ? ':' : ';'; break;
     ba2:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     ba6:	81 11       	cpse	r24, r1
     ba8:	fd c0       	rjmp	.+506    	; 0xda4 <_ZN3PS27getCharEv+0x33e>
     baa:	9b e3       	ldi	r25, 0x3B	; 59
     bac:	34 c1       	rjmp	.+616    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x52: result = kb_Shift ? '\"' : '\''; break;
     bae:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     bb2:	81 11       	cpse	r24, r1
     bb4:	f9 c0       	rjmp	.+498    	; 0xda8 <_ZN3PS27getCharEv+0x342>
     bb6:	97 e2       	ldi	r25, 0x27	; 39
     bb8:	2e c1       	rjmp	.+604    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x41: result = kb_Shift ? '<' : ','; break;
     bba:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     bbe:	81 11       	cpse	r24, r1
     bc0:	f5 c0       	rjmp	.+490    	; 0xdac <_ZN3PS27getCharEv+0x346>
     bc2:	9c e2       	ldi	r25, 0x2C	; 44
     bc4:	28 c1       	rjmp	.+592    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x49: result = kb_Shift ? '>' : '.'; break;
     bc6:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     bca:	81 11       	cpse	r24, r1
     bcc:	f1 c0       	rjmp	.+482    	; 0xdb0 <_ZN3PS27getCharEv+0x34a>
     bce:	9e e2       	ldi	r25, 0x2E	; 46
     bd0:	22 c1       	rjmp	.+580    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x4A: result = kb_Shift ? '?' : '/'; break;
     bd2:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     bd6:	81 11       	cpse	r24, r1
     bd8:	ed c0       	rjmp	.+474    	; 0xdb4 <_ZN3PS27getCharEv+0x34e>
     bda:	9f e2       	ldi	r25, 0x2F	; 47
     bdc:	1c c1       	rjmp	.+568    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		
		case 0x0D: result = '\t';		break;
		case 0x5A: result = '\n';		break;
		case 0x29: result = ' ';		break;
		case 0x66: result = KB_BACKSPACE; break;
     bde:	90 e8       	ldi	r25, 0x80	; 128
     be0:	1a c1       	rjmp	.+564    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x76: result = KB_ESC; break;
     be2:	99 e8       	ldi	r25, 0x89	; 137
     be4:	18 c1       	rjmp	.+560    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		
		case 0x58:{
			if (kb_Capslock){
     be6:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <kb_Capslock>
     bea:	88 23       	and	r24, r24
     bec:	21 f0       	breq	.+8      	; 0xbf6 <_ZN3PS27getCharEv+0x190>
				Lights |= (1<<2);
     bee:	8c 91       	ld	r24, X
     bf0:	84 60       	ori	r24, 0x04	; 4
     bf2:	8c 93       	st	X, r24
     bf4:	03 c0       	rjmp	.+6      	; 0xbfc <_ZN3PS27getCharEv+0x196>
			}
			else{
				Lights &= ~(1<<2);
     bf6:	8c 91       	ld	r24, X
     bf8:	8b 7f       	andi	r24, 0xFB	; 251
     bfa:	8c 93       	st	X, r24
			}
			setLight();
     bfc:	cd 01       	movw	r24, r26
     bfe:	1b df       	rcall	.-458    	; 0xa36 <_ZN3PS28setLightEv>
			result = 0x00;
     c00:	90 e0       	ldi	r25, 0x00	; 0
			break;
     c02:	09 c1       	rjmp	.+530    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		}
		
		case 0x77:{
			if (kb_Numlock){
     c04:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <kb_Numlock>
     c08:	88 23       	and	r24, r24
     c0a:	21 f0       	breq	.+8      	; 0xc14 <_ZN3PS27getCharEv+0x1ae>
				Lights |= (1<<1);
     c0c:	8c 91       	ld	r24, X
     c0e:	82 60       	ori	r24, 0x02	; 2
     c10:	8c 93       	st	X, r24
     c12:	03 c0       	rjmp	.+6      	; 0xc1a <_ZN3PS27getCharEv+0x1b4>
			}
			else{
				Lights &= ~(1<<1);
     c14:	8c 91       	ld	r24, X
     c16:	8d 7f       	andi	r24, 0xFD	; 253
     c18:	8c 93       	st	X, r24
			}
			setLight();
     c1a:	cd 01       	movw	r24, r26
     c1c:	0c df       	rcall	.-488    	; 0xa36 <_ZN3PS28setLightEv>
			result = 0x00;
     c1e:	90 e0       	ldi	r25, 0x00	; 0
			break;
     c20:	fa c0       	rjmp	.+500    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		}
		
		case 0x7E:{
			if (kb_ScrollLock){
     c22:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <kb_ScrollLock>
     c26:	88 23       	and	r24, r24
     c28:	21 f0       	breq	.+8      	; 0xc32 <_ZN3PS27getCharEv+0x1cc>
				Lights |= (1<<0);
     c2a:	8c 91       	ld	r24, X
     c2c:	81 60       	ori	r24, 0x01	; 1
     c2e:	8c 93       	st	X, r24
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <_ZN3PS27getCharEv+0x1d2>
			}
			else{
				Lights &= ~(1<<0);
     c32:	8c 91       	ld	r24, X
     c34:	8e 7f       	andi	r24, 0xFE	; 254
     c36:	8c 93       	st	X, r24
			}
			setLight();
     c38:	cd 01       	movw	r24, r26
     c3a:	fd de       	rcall	.-518    	; 0xa36 <_ZN3PS28setLightEv>
			result = 0x00;
     c3c:	90 e0       	ldi	r25, 0x00	; 0
			break;	
     c3e:	eb c0       	rjmp	.+470    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		}
		case 0x7C: result = '*'; break;
     c40:	9a e2       	ldi	r25, 0x2A	; 42
     c42:	e9 c0       	rjmp	.+466    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x7B: result = '-'; break;
     c44:	9d e2       	ldi	r25, 0x2D	; 45
     c46:	e7 c0       	rjmp	.+462    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x79: result = '+'; break;
     c48:	9b e2       	ldi	r25, 0x2B	; 43
     c4a:	e5 c0       	rjmp	.+458    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x71:
			if(kb_Extend) result = KB_DELETE;
     c4c:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <kb_Extend>
     c50:	81 11       	cpse	r24, r1
     c52:	b2 c0       	rjmp	.+356    	; 0xdb8 <_ZN3PS27getCharEv+0x352>
			else result = kb_Numlock ? '.' : 0x00;
     c54:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <kb_Numlock>
     c58:	81 11       	cpse	r24, r1
     c5a:	b0 c0       	rjmp	.+352    	; 0xdbc <_ZN3PS27getCharEv+0x356>
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	db c0       	rjmp	.+438    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x70:
			if(kb_Extend) result = KB_INSERT;
     c60:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <kb_Extend>
     c64:	81 11       	cpse	r24, r1
     c66:	ac c0       	rjmp	.+344    	; 0xdc0 <_ZN3PS27getCharEv+0x35a>
			else result = kb_Numlock ? '0' : 0x00;
     c68:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <kb_Numlock>
     c6c:	81 11       	cpse	r24, r1
     c6e:	aa c0       	rjmp	.+340    	; 0xdc4 <_ZN3PS27getCharEv+0x35e>
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	d1 c0       	rjmp	.+418    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x69:
			if(kb_Extend) result = KB_END;
     c74:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <kb_Extend>
     c78:	81 11       	cpse	r24, r1
     c7a:	a6 c0       	rjmp	.+332    	; 0xdc8 <_ZN3PS27getCharEv+0x362>
			else result = kb_Numlock ? '1' : 0x00;
     c7c:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <kb_Numlock>
     c80:	81 11       	cpse	r24, r1
     c82:	a4 c0       	rjmp	.+328    	; 0xdcc <_ZN3PS27getCharEv+0x366>
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	c7 c0       	rjmp	.+398    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x72:
			if(kb_Extend) result = KB_DOWN;
     c88:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <kb_Extend>
     c8c:	81 11       	cpse	r24, r1
     c8e:	a0 c0       	rjmp	.+320    	; 0xdd0 <_ZN3PS27getCharEv+0x36a>
			else result = kb_Numlock ? '2' : 0x00;
     c90:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <kb_Numlock>
     c94:	81 11       	cpse	r24, r1
     c96:	9e c0       	rjmp	.+316    	; 0xdd4 <_ZN3PS27getCharEv+0x36e>
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	bd c0       	rjmp	.+378    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x7A:
			if(kb_Extend) result = KB_PG_DN;
     c9c:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <kb_Extend>
     ca0:	81 11       	cpse	r24, r1
     ca2:	9a c0       	rjmp	.+308    	; 0xdd8 <_ZN3PS27getCharEv+0x372>
			else result = kb_Numlock ? '3' : 0x00;
     ca4:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <kb_Numlock>
     ca8:	81 11       	cpse	r24, r1
     caa:	98 c0       	rjmp	.+304    	; 0xddc <_ZN3PS27getCharEv+0x376>
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	b3 c0       	rjmp	.+358    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x6B:
			if(kb_Extend) result = KB_LEFT;
     cb0:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <kb_Extend>
     cb4:	81 11       	cpse	r24, r1
     cb6:	94 c0       	rjmp	.+296    	; 0xde0 <_ZN3PS27getCharEv+0x37a>
			else result = kb_Numlock ? '4' : 0x00;
     cb8:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <kb_Numlock>
     cbc:	81 11       	cpse	r24, r1
     cbe:	92 c0       	rjmp	.+292    	; 0xde4 <_ZN3PS27getCharEv+0x37e>
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a9 c0       	rjmp	.+338    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x73:
			result = kb_Numlock ? '5' : 0x00;
     cc4:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <kb_Numlock>
     cc8:	81 11       	cpse	r24, r1
     cca:	8e c0       	rjmp	.+284    	; 0xde8 <_ZN3PS27getCharEv+0x382>
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a3 c0       	rjmp	.+326    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x74:
			if(kb_Extend) result = KB_RIGHT;
     cd0:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <kb_Extend>
     cd4:	81 11       	cpse	r24, r1
     cd6:	8a c0       	rjmp	.+276    	; 0xdec <_ZN3PS27getCharEv+0x386>
			else result = kb_Numlock ? '6' : 0x00;
     cd8:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <kb_Numlock>
     cdc:	81 11       	cpse	r24, r1
     cde:	88 c0       	rjmp	.+272    	; 0xdf0 <_ZN3PS27getCharEv+0x38a>
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	99 c0       	rjmp	.+306    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x6C:
			if(kb_Extend) result = KB_HOME;
     ce4:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <kb_Extend>
     ce8:	81 11       	cpse	r24, r1
     cea:	84 c0       	rjmp	.+264    	; 0xdf4 <_ZN3PS27getCharEv+0x38e>
			else result = kb_Numlock ? '7' : 0x00;
     cec:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <kb_Numlock>
     cf0:	81 11       	cpse	r24, r1
     cf2:	82 c0       	rjmp	.+260    	; 0xdf8 <_ZN3PS27getCharEv+0x392>
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	8f c0       	rjmp	.+286    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x75:
			if(kb_Extend) result = KB_UP;
     cf8:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <kb_Extend>
     cfc:	81 11       	cpse	r24, r1
     cfe:	7e c0       	rjmp	.+252    	; 0xdfc <_ZN3PS27getCharEv+0x396>
			else result = kb_Numlock ? '8' : 0x00;
     d00:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <kb_Numlock>
     d04:	81 11       	cpse	r24, r1
     d06:	7c c0       	rjmp	.+248    	; 0xe00 <_ZN3PS27getCharEv+0x39a>
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	85 c0       	rjmp	.+266    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x7D:
			if(kb_Extend) result = KB_PG_UP;
     d0c:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <kb_Extend>
     d10:	81 11       	cpse	r24, r1
     d12:	78 c0       	rjmp	.+240    	; 0xe04 <_ZN3PS27getCharEv+0x39e>
			else result = kb_Numlock ? '9' : 0x00;
     d14:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <kb_Numlock>
     d18:	81 11       	cpse	r24, r1
     d1a:	76 c0       	rjmp	.+236    	; 0xe08 <_ZN3PS27getCharEv+0x3a2>
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	7b c0       	rjmp	.+246    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
     d20:	2f ef       	ldi	r18, 0xFF	; 255
     d22:	84 e3       	ldi	r24, 0x34	; 52
     d24:	9c e0       	ldi	r25, 0x0C	; 12
     d26:	21 50       	subi	r18, 0x01	; 1
     d28:	80 40       	sbci	r24, 0x00	; 0
     d2a:	90 40       	sbci	r25, 0x00	; 0
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <_ZN3PS27getCharEv+0x2c0>
     d2e:	00 c0       	rjmp	.+0      	; 0xd30 <_ZN3PS27getCharEv+0x2ca>
     d30:	00 00       	nop
			break;
		
		
		default:{
			result = 0x00;
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	70 c0       	rjmp	.+224    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>

uint8_t PS2::getChar(){
	uint8_t result;
	result = char_Received;
	switch(result){
		case 0x1C: result = 'a'; break;
     d36:	91 e6       	ldi	r25, 0x61	; 97
			result = 0x00;
			_delay_ms(500);
		}
	}
	if ((result>= 'a') && (result <= 'z')){
		if((kb_Shift && !kb_Capslock) || (!kb_Shift && kb_Capslock)){
     d38:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     d3c:	88 23       	and	r24, r24
     d3e:	29 f0       	breq	.+10     	; 0xd4a <_ZN3PS27getCharEv+0x2e4>
     d40:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <kb_Capslock>
     d44:	88 23       	and	r24, r24
     d46:	09 f4       	brne	.+2      	; 0xd4a <_ZN3PS27getCharEv+0x2e4>
     d48:	65 c0       	rjmp	.+202    	; 0xe14 <_ZN3PS27getCharEv+0x3ae>
     d4a:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <kb_Shift>
     d4e:	81 11       	cpse	r24, r1
     d50:	62 c0       	rjmp	.+196    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
     d52:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <kb_Capslock>
     d56:	81 11       	cpse	r24, r1
     d58:	5d c0       	rjmp	.+186    	; 0xe14 <_ZN3PS27getCharEv+0x3ae>
     d5a:	5d c0       	rjmp	.+186    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x52: result = kb_Shift ? '\"' : '\''; break;
		case 0x41: result = kb_Shift ? '<' : ','; break;
		case 0x49: result = kb_Shift ? '>' : '.'; break;
		case 0x4A: result = kb_Shift ? '?' : '/'; break;
		
		case 0x0D: result = '\t';		break;
     d5c:	99 e0       	ldi	r25, 0x09	; 9
     d5e:	5b c0       	rjmp	.+182    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x5A: result = '\n';		break;
		case 0x29: result = ' ';		break;
     d60:	90 e2       	ldi	r25, 0x20	; 32
     d62:	59 c0       	rjmp	.+178    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x1D: result = 'w'; break;
		case 0x22: result = 'x'; break;
		case 0x35: result = 'y'; break;
		case 0x1A: result = 'z'; break;
		
		case 0x45: result = kb_Shift ? ')' : '0'; break;
     d64:	99 e2       	ldi	r25, 0x29	; 41
     d66:	57 c0       	rjmp	.+174    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x16: result = kb_Shift ? '!' : '1'; break;
     d68:	91 e2       	ldi	r25, 0x21	; 33
     d6a:	55 c0       	rjmp	.+170    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x1E: result = kb_Shift ? '@' : '2'; break;
     d6c:	90 e4       	ldi	r25, 0x40	; 64
     d6e:	53 c0       	rjmp	.+166    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x26: result = kb_Shift ? '#' : '3'; break;
     d70:	93 e2       	ldi	r25, 0x23	; 35
     d72:	51 c0       	rjmp	.+162    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x25: result = kb_Shift ? '$' : '4'; break;
     d74:	94 e2       	ldi	r25, 0x24	; 36
     d76:	4f c0       	rjmp	.+158    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x2E: result = kb_Shift ? '%' : '5'; break;
     d78:	95 e2       	ldi	r25, 0x25	; 37
     d7a:	4d c0       	rjmp	.+154    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x36: result = kb_Shift ? '^' : '6'; break;
     d7c:	9e e5       	ldi	r25, 0x5E	; 94
     d7e:	4b c0       	rjmp	.+150    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x3D: result = kb_Shift ? '&' : '7'; break;
     d80:	96 e2       	ldi	r25, 0x26	; 38
     d82:	49 c0       	rjmp	.+146    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x3E: result = kb_Shift ? '*' : '8'; break;
     d84:	9a e2       	ldi	r25, 0x2A	; 42
     d86:	47 c0       	rjmp	.+142    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x46: result = kb_Shift ? '(' : '9'; break;
     d88:	98 e2       	ldi	r25, 0x28	; 40
     d8a:	45 c0       	rjmp	.+138    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		
		case 0x0E: result = kb_Shift ? '~' : '`'; break;
     d8c:	9e e7       	ldi	r25, 0x7E	; 126
     d8e:	43 c0       	rjmp	.+134    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x4E: result = kb_Shift ? '_' : '-'; break;
     d90:	9f e5       	ldi	r25, 0x5F	; 95
     d92:	41 c0       	rjmp	.+130    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x55: result = kb_Shift ? '+' : '='; break;
     d94:	9b e2       	ldi	r25, 0x2B	; 43
     d96:	3f c0       	rjmp	.+126    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x5D: result = kb_Shift ? '|' : '\\'; break;
     d98:	9c e7       	ldi	r25, 0x7C	; 124
     d9a:	3d c0       	rjmp	.+122    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x54: result = kb_Shift ? '{' : '['; break;
     d9c:	9b e7       	ldi	r25, 0x7B	; 123
     d9e:	3b c0       	rjmp	.+118    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x5B: result = kb_Shift ? '}' : ']'; break;
     da0:	9d e7       	ldi	r25, 0x7D	; 125
     da2:	39 c0       	rjmp	.+114    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x4C: result = kb_Shift ? ':' : ';'; break;
     da4:	9a e3       	ldi	r25, 0x3A	; 58
     da6:	37 c0       	rjmp	.+110    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x52: result = kb_Shift ? '\"' : '\''; break;
     da8:	92 e2       	ldi	r25, 0x22	; 34
     daa:	35 c0       	rjmp	.+106    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x41: result = kb_Shift ? '<' : ','; break;
     dac:	9c e3       	ldi	r25, 0x3C	; 60
     dae:	33 c0       	rjmp	.+102    	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x49: result = kb_Shift ? '>' : '.'; break;
     db0:	9e e3       	ldi	r25, 0x3E	; 62
     db2:	31 c0       	rjmp	.+98     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		case 0x4A: result = kb_Shift ? '?' : '/'; break;
     db4:	9f e3       	ldi	r25, 0x3F	; 63
     db6:	2f c0       	rjmp	.+94     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
		}
		case 0x7C: result = '*'; break;
		case 0x7B: result = '-'; break;
		case 0x79: result = '+'; break;
		case 0x71:
			if(kb_Extend) result = KB_DELETE;
     db8:	94 e8       	ldi	r25, 0x84	; 132
     dba:	2d c0       	rjmp	.+90     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			else result = kb_Numlock ? '.' : 0x00;
     dbc:	9e e2       	ldi	r25, 0x2E	; 46
     dbe:	2b c0       	rjmp	.+86     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x70:
			if(kb_Extend) result = KB_INSERT;
     dc0:	93 e8       	ldi	r25, 0x83	; 131
     dc2:	29 c0       	rjmp	.+82     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			else result = kb_Numlock ? '0' : 0x00;
     dc4:	90 e3       	ldi	r25, 0x30	; 48
     dc6:	27 c0       	rjmp	.+78     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x69:
			if(kb_Extend) result = KB_END;
     dc8:	96 e8       	ldi	r25, 0x86	; 134
     dca:	25 c0       	rjmp	.+74     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			else result = kb_Numlock ? '1' : 0x00;
     dcc:	91 e3       	ldi	r25, 0x31	; 49
     dce:	23 c0       	rjmp	.+70     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x72:
			if(kb_Extend) result = KB_DOWN;
     dd0:	92 e8       	ldi	r25, 0x82	; 130
     dd2:	21 c0       	rjmp	.+66     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			else result = kb_Numlock ? '2' : 0x00;
     dd4:	92 e3       	ldi	r25, 0x32	; 50
     dd6:	1f c0       	rjmp	.+62     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x7A:
			if(kb_Extend) result = KB_PG_DN;
     dd8:	98 e8       	ldi	r25, 0x88	; 136
     dda:	1d c0       	rjmp	.+58     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			else result = kb_Numlock ? '3' : 0x00;
     ddc:	93 e3       	ldi	r25, 0x33	; 51
     dde:	1b c0       	rjmp	.+54     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x6B:
			if(kb_Extend) result = KB_LEFT;
     de0:	93 e8       	ldi	r25, 0x83	; 131
     de2:	19 c0       	rjmp	.+50     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			else result = kb_Numlock ? '4' : 0x00;
     de4:	94 e3       	ldi	r25, 0x34	; 52
     de6:	17 c0       	rjmp	.+46     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x73:
			result = kb_Numlock ? '5' : 0x00;
     de8:	95 e3       	ldi	r25, 0x35	; 53
     dea:	15 c0       	rjmp	.+42     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x74:
			if(kb_Extend) result = KB_RIGHT;
     dec:	94 e8       	ldi	r25, 0x84	; 132
     dee:	13 c0       	rjmp	.+38     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			else result = kb_Numlock ? '6' : 0x00;
     df0:	96 e3       	ldi	r25, 0x36	; 54
     df2:	11 c0       	rjmp	.+34     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x6C:
			if(kb_Extend) result = KB_HOME;
     df4:	95 e8       	ldi	r25, 0x85	; 133
     df6:	0f c0       	rjmp	.+30     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			else result = kb_Numlock ? '7' : 0x00;
     df8:	97 e3       	ldi	r25, 0x37	; 55
     dfa:	0d c0       	rjmp	.+26     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x75:
			if(kb_Extend) result = KB_UP;
     dfc:	91 e8       	ldi	r25, 0x81	; 129
     dfe:	0b c0       	rjmp	.+22     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			else result = kb_Numlock ? '8' : 0x00;
     e00:	98 e3       	ldi	r25, 0x38	; 56
     e02:	09 c0       	rjmp	.+18     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			break;
		case 0x7D:
			if(kb_Extend) result = KB_PG_UP;
     e04:	97 e8       	ldi	r25, 0x87	; 135
     e06:	07 c0       	rjmp	.+14     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
			else result = kb_Numlock ? '9' : 0x00;
     e08:	99 e3       	ldi	r25, 0x39	; 57
     e0a:	05 c0       	rjmp	.+10     	; 0xe16 <_ZN3PS27getCharEv+0x3b0>
uint8_t PS2::getChar(){
	uint8_t result;
	result = char_Received;
	switch(result){
		case 0x1C: result = 'a'; break;
		case 0x32: result = 'b'; break;
     e0c:	92 e6       	ldi	r25, 0x62	; 98
     e0e:	94 cf       	rjmp	.-216    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
		case 0x21: result = 'c'; break;
		case 0x23: result = 'd'; break;
     e10:	94 e6       	ldi	r25, 0x64	; 100
     e12:	92 cf       	rjmp	.-220    	; 0xd38 <_ZN3PS27getCharEv+0x2d2>
			_delay_ms(500);
		}
	}
	if ((result>= 'a') && (result <= 'z')){
		if((kb_Shift && !kb_Capslock) || (!kb_Shift && kb_Capslock)){
			result = result + ('A' - 'a');
     e14:	90 52       	subi	r25, 0x20	; 32
		}
	}
	char_Received = 0x00;
     e16:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <char_Received>
	return result;
}
     e1a:	89 2f       	mov	r24, r25
     e1c:	08 95       	ret

00000e1e <__vector_1>:


ISR(INT0_vect){
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	8f 93       	push	r24
     e2e:	9f 93       	push	r25
	//Send data
	if (cmd_InProgress){
     e30:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <cmd_InProgress>
     e34:	88 23       	and	r24, r24
     e36:	09 f4       	brne	.+2      	; 0xe3a <__vector_1+0x1c>
     e38:	44 c0       	rjmp	.+136    	; 0xec2 <__vector_1+0xa4>
		cmd_Count++;
     e3a:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <cmd_Count>
     e3e:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <cmd_Count+0x1>
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <cmd_Count+0x1>
     e48:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <cmd_Count>
		switch(cmd_Count){
     e4c:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <cmd_Count>
     e50:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <cmd_Count+0x1>
     e54:	8a 30       	cpi	r24, 0x0A	; 10
     e56:	91 05       	cpc	r25, r1
     e58:	34 f4       	brge	.+12     	; 0xe66 <__vector_1+0x48>
     e5a:	82 30       	cpi	r24, 0x02	; 2
     e5c:	91 05       	cpc	r25, r1
     e5e:	64 f4       	brge	.+24     	; 0xe78 <__vector_1+0x5a>
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	41 f0       	breq	.+16     	; 0xe74 <__vector_1+0x56>
     e64:	c9 c0       	rjmp	.+402    	; 0xff8 <__vector_1+0x1da>
     e66:	8b 30       	cpi	r24, 0x0B	; 11
     e68:	91 05       	cpc	r25, r1
     e6a:	e9 f0       	breq	.+58     	; 0xea6 <__vector_1+0x88>
     e6c:	a4 f0       	brlt	.+40     	; 0xe96 <__vector_1+0x78>
     e6e:	0c 97       	sbiw	r24, 0x0c	; 12
     e70:	e9 f0       	breq	.+58     	; 0xeac <__vector_1+0x8e>
     e72:	c2 c0       	rjmp	.+388    	; 0xff8 <__vector_1+0x1da>
			case 1:{ //Start bit
				PORT_KB &= ~(1<<DATA_PIN);
     e74:	94 98       	cbi	0x12, 4	; 18
				break;
     e76:	c0 c0       	rjmp	.+384    	; 0xff8 <__vector_1+0x1da>
			}
			
			case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9:{ //Data bits
				if (cmd_Value & 0x01){
     e78:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <cmd_Value>
     e7c:	80 ff       	sbrs	r24, 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <__vector_1+0x66>
					PORT_KB |= (1<<DATA_PIN);
     e80:	94 9a       	sbi	0x12, 4	; 18
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <__vector_1+0x68>
				}
				else{
					PORT_KB &= ~(1<<DATA_PIN);
     e84:	94 98       	cbi	0x12, 4	; 18
				}
				cmd_Value = cmd_Value >> 1;
     e86:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <cmd_Value>
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	95 95       	asr	r25
     e8e:	87 95       	ror	r24
     e90:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <cmd_Value>
				break;
     e94:	b1 c0       	rjmp	.+354    	; 0xff8 <__vector_1+0x1da>
			}
			
			case 10: {
				if (cmd_Parity){
     e96:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <cmd_Parity>
     e9a:	88 23       	and	r24, r24
     e9c:	11 f0       	breq	.+4      	; 0xea2 <__vector_1+0x84>
					PORT_KB |= (1<<DATA_PIN);
     e9e:	94 9a       	sbi	0x12, 4	; 18
     ea0:	ab c0       	rjmp	.+342    	; 0xff8 <__vector_1+0x1da>
				}
				else{
					PORT_KB &= ~(1<<DATA_PIN);
     ea2:	94 98       	cbi	0x12, 4	; 18
     ea4:	a9 c0       	rjmp	.+338    	; 0xff8 <__vector_1+0x1da>
				}
				break;
			}
			
			case 11:{ //Stop bit
				PORT_KB |= (1<<DATA_PIN);
     ea6:	94 9a       	sbi	0x12, 4	; 18
				DDR_KB  &= ~(1<<DATA_PIN); //Ready to receive data from KB
     ea8:	8c 98       	cbi	0x11, 4	; 17
				break;
     eaa:	a6 c0       	rjmp	.+332    	; 0xff8 <__vector_1+0x1da>
			}
			
			case 12:{ //ACK from KB
				if (!(PIND & (1<<DATA_PIN))){
     eac:	84 99       	sbic	0x10, 4	; 16
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <__vector_1+0x98>
					cmd_ACKValue = 0;
     eb0:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <cmd_ACKValue>
     eb4:	03 c0       	rjmp	.+6      	; 0xebc <__vector_1+0x9e>
				}
				else{
					cmd_ACKValue = 1;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <cmd_ACKValue>
				}
				cmd_InProgress = false;
     ebc:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <cmd_InProgress>
     ec0:	9b c0       	rjmp	.+310    	; 0xff8 <__vector_1+0x1da>
		}
		return ;
	}
	//Get Data
	int value;
	if (!(PIND & (1<<DATA_PIN))){
     ec2:	90 b3       	in	r25, 0x10	; 16
	}
	else{
		value = 1;
	}
	
	if (char_Count > 0 && char_Count < 11){
     ec4:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <char_Count>
     ec8:	88 23       	and	r24, r24
     eca:	29 f0       	breq	.+10     	; 0xed6 <__vector_1+0xb8>
     ecc:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <char_Count>
     ed0:	8b 30       	cpi	r24, 0x0B	; 11
     ed2:	08 f4       	brcc	.+2      	; 0xed6 <__vector_1+0xb8>
     ed4:	7f c0       	rjmp	.+254    	; 0xfd4 <__vector_1+0x1b6>
		char_Current |= (value << (char_Count - 1));
	}
	char_Count++;
     ed6:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <char_Count>
     eda:	8f 5f       	subi	r24, 0xFF	; 255
     edc:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <char_Count>
	
	if (char_Count == 11){
     ee0:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <char_Count>
     ee4:	8b 30       	cpi	r24, 0x0B	; 11
     ee6:	09 f0       	breq	.+2      	; 0xeea <__vector_1+0xcc>
     ee8:	87 c0       	rjmp	.+270    	; 0xff8 <__vector_1+0x1da>
		switch(char_Current){
     eea:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <char_Current>
     eee:	87 37       	cpi	r24, 0x77	; 119
     ef0:	09 f4       	brne	.+2      	; 0xef4 <__vector_1+0xd6>
     ef2:	40 c0       	rjmp	.+128    	; 0xf74 <__vector_1+0x156>
     ef4:	48 f4       	brcc	.+18     	; 0xf08 <__vector_1+0xea>
     ef6:	88 35       	cpi	r24, 0x58	; 88
     ef8:	09 f4       	brne	.+2      	; 0xefc <__vector_1+0xde>
     efa:	4d c0       	rjmp	.+154    	; 0xf96 <__vector_1+0x178>
     efc:	89 35       	cpi	r24, 0x59	; 89
     efe:	b9 f0       	breq	.+46     	; 0xf2e <__vector_1+0x110>
     f00:	82 31       	cpi	r24, 0x12	; 18
     f02:	09 f0       	breq	.+2      	; 0xf06 <__vector_1+0xe8>
     f04:	59 c0       	rjmp	.+178    	; 0xfb8 <__vector_1+0x19a>
     f06:	13 c0       	rjmp	.+38     	; 0xf2e <__vector_1+0x110>
     f08:	80 3e       	cpi	r24, 0xE0	; 224
     f0a:	d1 f0       	breq	.+52     	; 0xf40 <__vector_1+0x122>
     f0c:	18 f4       	brcc	.+6      	; 0xf14 <__vector_1+0xf6>
     f0e:	8e 37       	cpi	r24, 0x7E	; 126
     f10:	01 f1       	breq	.+64     	; 0xf52 <__vector_1+0x134>
     f12:	52 c0       	rjmp	.+164    	; 0xfb8 <__vector_1+0x19a>
     f14:	80 3f       	cpi	r24, 0xF0	; 240
     f16:	19 f0       	breq	.+6      	; 0xf1e <__vector_1+0x100>
     f18:	8a 3f       	cpi	r24, 0xFA	; 250
     f1a:	29 f0       	breq	.+10     	; 0xf26 <__vector_1+0x108>
     f1c:	4d c0       	rjmp	.+154    	; 0xfb8 <__vector_1+0x19a>
			case 0xF0: { 
				kb_Release = true;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <kb_Release>
				break;
     f24:	52 c0       	rjmp	.+164    	; 0xfca <__vector_1+0x1ac>
			}
			
			case 0xFA: { 
				cmd_ACKOk = true;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <cmd_ACKOk>
				break;
     f2c:	4e c0       	rjmp	.+156    	; 0xfca <__vector_1+0x1ac>
			}
			
			case 0x12:
			case 0x59: {
				kb_Shift = kb_Release ? false : true;
     f2e:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <kb_Release>
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	89 27       	eor	r24, r25
     f36:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <kb_Shift>
				kb_Release	= false;
     f3a:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <kb_Release>
				break;
     f3e:	45 c0       	rjmp	.+138    	; 0xfca <__vector_1+0x1ac>
			}
			
			case 0xE0:{
				kb_Extend = !kb_Extend;
     f40:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <kb_Extend>
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	89 27       	eor	r24, r25
     f48:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <kb_Extend>
				kb_Release = false;
     f4c:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <kb_Release>
				break;
     f50:	3c c0       	rjmp	.+120    	; 0xfca <__vector_1+0x1ac>
			}
			case 0x7E:{
				if (kb_Release){
     f52:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <kb_Release>
     f56:	88 23       	and	r24, r24
     f58:	19 f0       	breq	.+6      	; 0xf60 <__vector_1+0x142>
					kb_Release	= false;
     f5a:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <kb_Release>
     f5e:	35 c0       	rjmp	.+106    	; 0xfca <__vector_1+0x1ac>
				}
				else{
					kb_ScrollLock = !(kb_ScrollLock);
     f60:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <kb_ScrollLock>
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	89 27       	eor	r24, r25
     f68:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <kb_ScrollLock>
					char_Received = char_Current;
     f6c:	8e e7       	ldi	r24, 0x7E	; 126
     f6e:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <char_Received>
     f72:	2b c0       	rjmp	.+86     	; 0xfca <__vector_1+0x1ac>
				}
				break;
			}
			case 0x77: {
				if (kb_Release){
     f74:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <kb_Release>
     f78:	88 23       	and	r24, r24
     f7a:	19 f0       	breq	.+6      	; 0xf82 <__vector_1+0x164>
					kb_Release	= false;
     f7c:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <kb_Release>
     f80:	24 c0       	rjmp	.+72     	; 0xfca <__vector_1+0x1ac>
				}
				else{
					kb_Numlock = !(kb_Numlock);
     f82:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <kb_Numlock>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	89 27       	eor	r24, r25
     f8a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <kb_Numlock>
					char_Received = char_Current;
     f8e:	87 e7       	ldi	r24, 0x77	; 119
     f90:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <char_Received>
     f94:	1a c0       	rjmp	.+52     	; 0xfca <__vector_1+0x1ac>
				}
				break;
			}
			case 0x58: {
				if (kb_Release){
     f96:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <kb_Release>
     f9a:	88 23       	and	r24, r24
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <__vector_1+0x186>
					kb_Release	= false;
     f9e:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <kb_Release>
     fa2:	13 c0       	rjmp	.+38     	; 0xfca <__vector_1+0x1ac>
				}
				else{
					kb_Capslock = !(kb_Capslock);
     fa4:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <kb_Capslock>
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	89 27       	eor	r24, r25
     fac:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <kb_Capslock>
					char_Received = char_Current;
     fb0:	88 e5       	ldi	r24, 0x58	; 88
     fb2:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <char_Received>
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__vector_1+0x1ac>
				}
				break;
			}
			
			default: { 
				if (kb_Release){
     fb8:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <kb_Release>
     fbc:	99 23       	and	r25, r25
     fbe:	19 f0       	breq	.+6      	; 0xfc6 <__vector_1+0x1a8>
					kb_Release = false;
     fc0:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <kb_Release>
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <__vector_1+0x1ac>
				}
				else{
					char_Received = char_Current;
     fc6:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <char_Received>
				}
			}
		}
		char_Current = 0;
     fca:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <char_Current>
		char_Count = 0;
     fce:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <char_Count>
     fd2:	12 c0       	rjmp	.+36     	; 0xff8 <__vector_1+0x1da>
	else{
		value = 1;
	}
	
	if (char_Count > 0 && char_Count < 11){
		char_Current |= (value << (char_Count - 1));
     fd4:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <char_Count>
     fd8:	94 fb       	bst	r25, 4
     fda:	22 27       	eor	r18, r18
     fdc:	20 f9       	bld	r18, 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 50       	subi	r24, 0x01	; 1
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <__vector_1+0x1ca>
     fe4:	22 0f       	add	r18, r18
     fe6:	33 1f       	adc	r19, r19
     fe8:	8a 95       	dec	r24
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <__vector_1+0x1c6>
     fec:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <char_Current>
     ff0:	28 2b       	or	r18, r24
     ff2:	20 93 ea 02 	sts	0x02EA, r18	; 0x8002ea <char_Current>
     ff6:	6f cf       	rjmp	.-290    	; 0xed6 <__vector_1+0xb8>
			}
		}
		char_Current = 0;
		char_Count = 0;
	}
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f 90       	pop	r0
    1006:	1f 90       	pop	r1
    1008:	18 95       	reti

0000100a <__tablejump2__>:
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	05 90       	lpm	r0, Z+
    1010:	f4 91       	lpm	r31, Z
    1012:	e0 2d       	mov	r30, r0
    1014:	09 94       	ijmp

00001016 <_exit>:
    1016:	f8 94       	cli

00001018 <__stop_program>:
    1018:	ff cf       	rjmp	.-2      	; 0x1018 <__stop_program>
